as.data.frame() %>%
dplyr::select(starts_with("alpha_slope"))
df_alpha_init <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_init"))
df_alpha_c <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_c"))
assign(paste0("Parameters_",Code.focal,"_",alpha.function),list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(paste0("Parameters_",Code.focal,"_",alpha.function),
path=paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
#---- 3.3. Extraction fecundity---
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = Code.focal
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
}
}
save(paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"),
paste0("Parameters_",Code.focal,"_",alpha.function))
save(get(paste0("Parameters_",Code.focal,"_",alpha.function)),
path=paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
paste0("Parameters_",Code.focal,"_",alpha.function)
assign(paste0("Parameters_",Code.focal,"_",alpha.function),
list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(get(paste0("Parameters_",Code.focal,"_",alpha.function)),
path=paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
save(get(paste0("Parameters_",Code.focal,"_",alpha.function)),
paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
save(get(paste0("Parameters_",Code.focal,"_",alpha.function)),
file =paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
get(paste0("Parameters_",Code.focal,"_",alpha.function))
save(paste0("Parameters_",Code.focal,"_",alpha.function),
file =paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
df.param <- list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
)
save( df.param ,
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
save(list =paste0("Parameters_",Code.focal,"_",alpha.function),
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
load("~/Documents/Projects/Density-dependentFunctions/results/Parameters_HYGA_function_2.RData")
View(Parameters_HYGA_function_2)
function.int
focal.levels
Code.focal
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 2. Run the model for each focal----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Fecunditydistribution <- data.frame()
PostFecunditydistribution <- data_frame()
for(Code.focal in focal.levels){
for (function.int in c(1:4)){
print(paste(Code.focal,", function",function.int))
if(Code.focal ==focal.levels[1] & function.int  ==1)next
function.vec <- c(0,0,0,0)
function.vec[function.int] <- 1
# data for the focal
SpDataFocal <- Spcompetition[[Code.focal]]
# Next continue to extract the data needed to run the model.
N <- as.integer(nrow(SpDataFocal))
Fecundity <- as.integer(SpDataFocal$seeds)
#---- 2. ABUDANCE MATRIX----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 2.1. Interaction (direct) matrix of plant with COMP ----
# Now calculate the total number of plant species to use for the model, discounting
#       any species columns with 0 abundance. Save a vector of the species names
#       corresponding to each column for easy matching later.
AllSpNames <- names(SpDataFocal)[!names(SpDataFocal) %in% c("focal","year","day","month",
"block","unique.plot",
"flower","seeds","individual")]
AllSpAbunds <- SpDataFocal %>%
dplyr::select(all_of(AllSpNames))%>%
mutate_at( AllSpNames, as.numeric)
SpTotals <- colSums(AllSpAbunds)
SpToKeep <- SpTotals > 0
S <- sum(SpToKeep)
SpMatrix <- matrix(NA, nrow = N, ncol = S)
i <- 1
for(s in 1:ncol(AllSpAbunds)){
if(SpToKeep[s] == 1){
SpMatrix[,i] <- AllSpAbunds[,s]
i <- i + 1
}else{next}
}
#SpMatrix <-round((SpMatrix/max(SpMatrix))*100) #scale all the interaction between 0 and 100
#if(max(SpMatrix) == 100){print("scale SpMatrix_plant correct")}
SpNames <- AllSpNames[SpToKeep]
#assign(paste0("SpNames_",FocalPrefix),
#     SpNames)
Intra <- ifelse(SpNames == Code.focal, 1, 0)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 3. BAYES FIT----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##---- 3.1. Set up summary interactions df and parameters ----
run_estimation <- 1
alphaFunct1 <- function.vec[1]
alphaFunct2 <- function.vec[2]
alphaFunct3 <- function.vec[3]
alphaFunct4 <- function.vec[4]
alpha.function <- paste0("function_",which(function.vec==1))
DataVec <- c("N", "S",
"Fecundity", "SpMatrix",
"Intra","run_estimation","alphaFunct1",
"alphaFunct2","alphaFunct3","alphaFunct4")
##---- 3.2. Run  final fit ----
# Now run a fianl fit of the model to assess parameter
print("Natural Fit beginning")
#install.packages("codetools")
library("codetools")
options(mc.cores = parallel::detectCores())
# defiining initial value of lambda to help with computation failure
list.init <- function(...)list(lambdas = array(as.numeric(rnorm(1,
mean=log(fecundity.summary$mean.seed[which(fecundity.summary$focal==Code.focal)]),
sd = abs(log(fecundity.summary$st.dev.seed[which(fecundity.summary$focal==Code.focal)])))),
dim = 1))
FinalFit <- stan(file = "code/DensityFunct_BH_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)
save(file= paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"),
FinalFit)
#load(paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"))
FinalPosteriors <- rstan::extract(FinalFit)
print("Final Fit done")
#---- 3.3. Final fit posterior check and behavior checks----
##### Diagnostic plots and post prediction
pdf(paste0("figures/FinalFit_",Code.focal,"_",alpha.function,".pdf"))
# Internal checks of the behaviour of the Bayes Modelsummary(PrelimFit)
source("code/stan_modelcheck_rem.R") # call the functions to check diagnistic plots
# check the distribution of Rhats and effective sample sizes
##### Posterior check
stan_post_pred_check(FinalPosteriors,"F_hat",Fecundity,
paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
# N.B. amount by which autocorrelation within the chains increases uncertainty in estimates can be measured
hist(summary(FinalFit)$summary[,"Rhat"],
main = paste("Finat Fit: Histogram of Rhat for",
Code.focal," and ",alpha.function))
hist(summary(FinalFit)$summary[,"n_eff"],
main = paste("Finat Fit: Histogram of Neff for",
Code.focal," and ",alpha.function))
# plot the corresponding graphs
stan_model_check(FinalFit,
param =c('lambdas','c','alpha_initial','alpha_slope','c'))
# Next check the correlation among key model parameters and identify any
#pairs(FinalFit, pars = c("lambdas",'alpha_initial','alpha_slope','c'))
dev.off()
#---- 3.3. Extract coefficients ---
df_lambda <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("lambdas[1]"))
df_alpha_slope <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_slope"))
df_alpha_init <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_init"))
df_alpha_c <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_c"))
assign(paste0("Parameters_",Code.focal,"_",alpha.function),
list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(list =paste0("Parameters_",Code.focal,"_",alpha.function),
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
#---- 3.3. Extraction fecundity---
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = Code.focal
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 2. Run the model for each focal----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Fecunditydistribution <- data.frame()
PostFecunditydistribution <- data_frame()
for(Code.focal in focal.levels){
for (function.int in c(1:4)){
print(paste(Code.focal,", function",function.int))
# if(Code.focal ==focal.levels[1] & function.int  ==1)next
function.vec <- c(0,0,0,0)
function.vec[function.int] <- 1
# data for the focal
SpDataFocal <- Spcompetition[[Code.focal]]
# Next continue to extract the data needed to run the model.
N <- as.integer(nrow(SpDataFocal))
Fecundity <- as.integer(SpDataFocal$seeds)
#---- 2. ABUDANCE MATRIX----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 2.1. Interaction (direct) matrix of plant with COMP ----
# Now calculate the total number of plant species to use for the model, discounting
#       any species columns with 0 abundance. Save a vector of the species names
#       corresponding to each column for easy matching later.
AllSpNames <- names(SpDataFocal)[!names(SpDataFocal) %in% c("focal","year","day","month",
"block","unique.plot",
"flower","seeds","individual")]
AllSpAbunds <- SpDataFocal %>%
dplyr::select(all_of(AllSpNames))%>%
mutate_at( AllSpNames, as.numeric)
SpTotals <- colSums(AllSpAbunds)
SpToKeep <- SpTotals > 0
S <- sum(SpToKeep)
SpMatrix <- matrix(NA, nrow = N, ncol = S)
i <- 1
for(s in 1:ncol(AllSpAbunds)){
if(SpToKeep[s] == 1){
SpMatrix[,i] <- AllSpAbunds[,s]
i <- i + 1
}else{next}
}
#SpMatrix <-round((SpMatrix/max(SpMatrix))*100) #scale all the interaction between 0 and 100
#if(max(SpMatrix) == 100){print("scale SpMatrix_plant correct")}
SpNames <- AllSpNames[SpToKeep]
#assign(paste0("SpNames_",FocalPrefix),
#     SpNames)
Intra <- ifelse(SpNames == Code.focal, 1, 0)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 3. BAYES FIT----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##---- 3.1. Set up summary interactions df and parameters ----
run_estimation <- 1
alphaFunct1 <- function.vec[1]
alphaFunct2 <- function.vec[2]
alphaFunct3 <- function.vec[3]
alphaFunct4 <- function.vec[4]
alpha.function <- paste0("function_",which(function.vec==1))
DataVec <- c("N", "S",
"Fecundity", "SpMatrix",
"Intra","run_estimation","alphaFunct1",
"alphaFunct2","alphaFunct3","alphaFunct4")
##---- 3.2. Run  final fit ----
# Now run a fianl fit of the model to assess parameter
print("Natural Fit beginning")
#install.packages("codetools")
library("codetools")
options(mc.cores = parallel::detectCores())
# defiining initial value of lambda to help with computation failure
list.init <- function(...)list(lambdas = array(as.numeric(rnorm(1,
mean=log(fecundity.summary$mean.seed[which(fecundity.summary$focal==Code.focal)]),
sd = abs(log(fecundity.summary$st.dev.seed[which(fecundity.summary$focal==Code.focal)])))),
dim = 1))
FinalFit <- stan(file = "code/DensityFunct_BH_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)
save(file= paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"),
FinalFit)
#load(paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"))
FinalPosteriors <- rstan::extract(FinalFit)
print("Final Fit done")
#---- 3.3. Final fit posterior check and behavior checks----
##### Diagnostic plots and post prediction
pdf(paste0("figures/FinalFit_",Code.focal,"_",alpha.function,".pdf"))
# Internal checks of the behaviour of the Bayes Modelsummary(PrelimFit)
source("code/stan_modelcheck_rem.R") # call the functions to check diagnistic plots
# check the distribution of Rhats and effective sample sizes
##### Posterior check
stan_post_pred_check(FinalPosteriors,"F_hat",Fecundity,
paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
# N.B. amount by which autocorrelation within the chains increases uncertainty in estimates can be measured
hist(summary(FinalFit)$summary[,"Rhat"],
main = paste("Finat Fit: Histogram of Rhat for",
Code.focal," and ",alpha.function))
hist(summary(FinalFit)$summary[,"n_eff"],
main = paste("Finat Fit: Histogram of Neff for",
Code.focal," and ",alpha.function))
# plot the corresponding graphs
stan_model_check(FinalFit,
param =c('lambdas','c','alpha_initial','alpha_slope','c'))
# Next check the correlation among key model parameters and identify any
#pairs(FinalFit, pars = c("lambdas",'alpha_initial','alpha_slope','c'))
dev.off()
#---- 3.3. Extract coefficients ---
df_lambda <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("lambdas[1]"))
df_alpha_slope <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_slope"))
df_alpha_init <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_init"))
df_alpha_c <- get(paste0("FinalFit",Code.focal,"_",alpha.function)) %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_c"))
assign(paste0("Parameters_",Code.focal,"_",alpha.function),
list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(list =paste0("Parameters_",Code.focal,"_",alpha.function),
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
#---- 3.3. Extraction fecundity---
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = Code.focal
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
}
}
df_lambda <- FinalFit%>%
as.data.frame() %>%
dplyr::select(starts_with("lambdas[1]"))
df_alpha_slope <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_slope"))
df_alpha_init <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_init"))
df_alpha_c <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_c"))
assign(paste0("Parameters_",Code.focal,"_",alpha.function),
list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(list =paste0("Parameters_",Code.focal,"_",alpha.function),
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = Code.focal
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
for(Code.focal in focal.levels){
for (function.int in c(1:4)){
print(paste(Code.focal,", function",function.int))
if(Code.focal ==focal.levels[1] & function.int  ==1)next
function.vec <- c(0,0,0,0)
function.vec[function.int] <- 1
# data for the focal
SpDataFocal <- Spcompetition[[Code.focal]]
# Next continue to extract the data needed to run the model.
N <- as.integer(nrow(SpDataFocal))
Fecundity <- as.integer(SpDataFocal$seeds)
#---- 2. ABUDANCE MATRIX----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 2.1. Interaction (direct) matrix of plant with COMP ----
# Now calculate the total number of plant species to use for the model, discounting
#       any species columns with 0 abundance. Save a vector of the species names
#       corresponding to each column for easy matching later.
AllSpNames <- names(SpDataFocal)[!names(SpDataFocal) %in% c("focal","year","day","month",
"block","unique.plot",
"flower","seeds","individual")]
AllSpAbunds <- SpDataFocal %>%
dplyr::select(all_of(AllSpNames))%>%
mutate_at( AllSpNames, as.numeric)
SpTotals <- colSums(AllSpAbunds)
SpToKeep <- SpTotals > 0
S <- sum(SpToKeep)
SpMatrix <- matrix(NA, nrow = N, ncol = S)
i <- 1
for(s in 1:ncol(AllSpAbunds)){
if(SpToKeep[s] == 1){
SpMatrix[,i] <- AllSpAbunds[,s]
i <- i + 1
}else{next}
}
#SpMatrix <-round((SpMatrix/max(SpMatrix))*100) #scale all the interaction between 0 and 100
#if(max(SpMatrix) == 100){print("scale SpMatrix_plant correct")}
SpNames <- AllSpNames[SpToKeep]
#assign(paste0("SpNames_",FocalPrefix),
#     SpNames)
Intra <- ifelse(SpNames == Code.focal, 1, 0)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 3. BAYES FIT----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##---- 3.1. Set up summary interactions df and parameters ----
run_estimation <- 1
alphaFunct1 <- function.vec[1]
alphaFunct2 <- function.vec[2]
alphaFunct3 <- function.vec[3]
alphaFunct4 <- function.vec[4]
alpha.function <- paste0("function_",which(function.vec==1))
DataVec <- c("N", "S",
"Fecundity", "SpMatrix",
"Intra","run_estimation","alphaFunct1",
"alphaFunct2","alphaFunct3","alphaFunct4")
##---- 3.2. Run  final fit ----
# Now run a fianl fit of the model to assess parameter
print("Natural Fit beginning")
#install.packages("codetools")
library("codetools")
options(mc.cores = parallel::detectCores())
# defiining initial value of lambda to help with computation failure
list.init <- function(...)list(lambdas = array(as.numeric(rnorm(1,
mean=log(fecundity.summary$mean.seed[which(fecundity.summary$focal==Code.focal)]),
sd = abs(log(fecundity.summary$st.dev.seed[which(fecundity.summary$focal==Code.focal)])))),
dim = 1))
FinalFit <- stan(file = "code/DensityFunct_BH_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)
save(file= paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"),
FinalFit)
#load(paste0("results/FinalFit_",Code.focal,"_",alpha.function,".rds"))
FinalPosteriors <- rstan::extract(FinalFit)
print("Final Fit done")
#---- 3.3. Final fit posterior check and behavior checks----
##### Diagnostic plots and post prediction
pdf(paste0("figures/FinalFit_",Code.focal,"_",alpha.function,".pdf"))
# Internal checks of the behaviour of the Bayes Modelsummary(PrelimFit)
source("code/stan_modelcheck_rem.R") # call the functions to check diagnistic plots
# check the distribution of Rhats and effective sample sizes
##### Posterior check
stan_post_pred_check(FinalPosteriors,"F_hat",Fecundity,
paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
# N.B. amount by which autocorrelation within the chains increases uncertainty in estimates can be measured
hist(summary(FinalFit)$summary[,"Rhat"],
main = paste("Finat Fit: Histogram of Rhat for",
Code.focal," and ",alpha.function))
hist(summary(FinalFit)$summary[,"n_eff"],
main = paste("Finat Fit: Histogram of Neff for",
Code.focal," and ",alpha.function))
# plot the corresponding graphs
stan_model_check(FinalFit,
param =c('lambdas','c','alpha_initial','alpha_slope','c'))
# Next check the correlation among key model parameters and identify any
#pairs(FinalFit, pars = c("lambdas",'alpha_initial','alpha_slope','c'))
dev.off()
#---- 3.3. Extract coefficients ---
df_lambda <- FinalFit%>%
as.data.frame() %>%
dplyr::select(starts_with("lambdas[1]"))
df_alpha_slope <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_slope"))
df_alpha_init <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_init"))
df_alpha_c <- FinalFit %>%
as.data.frame() %>%
dplyr::select(starts_with("alpha_c"))
assign(paste0("Parameters_",Code.focal,"_",alpha.function),
list(lambda =  df_lambda,
alpha_slope= df_alpha_slope,
alpha_init =df_alpha_init,
alpha_c = df_alpha_c
))
save(list =paste0("Parameters_",Code.focal,"_",alpha.function),
file = paste0("results/Parameters_",Code.focal,"_",alpha.function,".RData"))
#---- 3.3. Extraction fecundity---
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = Code.focal
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
}
}

summary.stability.plot <-  ggplot(df.sim.std.small, aes(x=as.factor(com.comp.coex),
fill=as.factor(significance))) +
geom_bar_pattern(aes(pattern=as.factor(com.comp.coex.int)),
position = "stack",
stat= "count",
color = "black",
pattern_angle =45,
pattern_density = 0.2,
pattern_spacing = 0.025,
pattern_key_scale_factor = 1,
na.rm=T) +
scale_fill_manual(values=  c("#888888",
"#661100","#CC6677","#882255","#AA4499",
"#999933",  "#117733",
"#332288","#88CCEE",
"#6699CC", "#44AA99",
"#DDCC77")) +
scale_pattern_manual(values=c("stripe","none"),
labels=c("Less than 2 species","2 species")) +
labs(title ="Percentage of community predicted to have both species in community with underlying dynamics",
subtitle = " initial intraspecific interactions > initial interspecific community",
pattern= "Community composition",
fill = "Community dynamics") +
facet_wrap(function.int~., ncol=2, nrow=2,scales="free_x") +
theme(panel.background = element_blank(),
legend.key.size = unit(1, 'cm'))
summary.stability.plot
ggsave(summary.stability.plot,
file = "figures/summary.stability.plot.pdf")
summary.stability.plot <-  ggplot(df.sim.std.small, aes(x=as.factor(com.comp.coex),
fill=as.factor(significance))) +
geom_bar_pattern(aes(pattern=as.factor(com.comp.coex.int)),
position = "stack",
stat= "count",
color = "black",
pattern_angle =45,
pattern_density = 0.2,
pattern_spacing = 0.025,
pattern_key_scale_factor = 1,
na.rm=T) +
scale_fill_manual(values=  c("#888888",
"#661100","#CC6677","#882255","#AA4499",
"#999933",  "#117733",
"#332288","#88CCEE",
"#6699CC", "#44AA99",
"#DDCC77")) +
scale_pattern_manual(values=c("stripe","none"),
labels=c("Less than 2 species","2 species")) +
labs(title ="Percentage of community predicted to have both species in community with underlying dynamics",
subtitle = " initial intraspecific interactions > initial interspecific community",
pattern= "Community composition",
fill = "Community dynamics") +
facet_wrap(function.int~., ncol=2, nrow=2) +
theme(panel.background = element_blank(),
legend.key.size = unit(1, 'cm'))
summary.stability.plot
ggsave(summary.stability.plot,
file = "figures/summary.stability.plot.pdf")
head(df.sim)
df_compfac.n <- df.sim[n,]
n=
1
df_compfac.n <- df.sim[n,]
df_compfac.n$function.int
nrow(df.sim)
length(params)
p <- params[[i]]
df_compfac.n <- as.data.frame(params[[i]]) %>%
mutate(focal = c("i","j"))  %>%
melt(id.vars="focal")   %>%
mutate( vars = paste(variable ,focal,sep=".")) %>%
dplyr::select( value, vars) %>%
spread(key=vars, value=value) %>%
mutate(function.int  = function.int )
df_compfac.n
p$a_initial
df_compfac.n <- as.data.frame(params[[i]]) %>%
mutate(focal = c("i","j"))  %>%
melt(id.vars="focal")   %>%
mutate( vars = paste(variable ,focal,sep=".")) %>%
dplyr::select( value, vars) %>%
spread(key=vars, value=value) %>%
mutate(function.int  = function.int)
df_compfac.n <- bind_rows(df_compfac.n,df_compfac.n)
df_compfac.n
df_compfac.n <- as.data.frame(params[[i]]) %>%
mutate(focal = c("i","j"))
df_compfac.n
a_initial
p$a_initial
df_compfac.n <- as.data.frame(params[[i]]) %>%
mutate(focal = c("i","j"))  %>%
mutate( vars = paste(variable ,focal,sep=".")) %>%
dplyr::select(lambda, Nmax.i, a_slope.i,a_initial.i,c.i)
df_compfac.n <- as.data.frame(params[[i]]) %>%
dplyr::select(lambda, Nmax.i, a_slope.i,a_initial.i,c.i)
df_compfac.n
alpha_function2(df_compfac.n$a_initial.i,df_compfac.n$a_slope.i,
df_compfac.n$Nmax.i)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial.i,df_compfac.n$a_slope.i,c(1,1),
df_compfac.n$Nmax.i))
alpha_function2(df_compfac.n$a_initial.i,df_compfac.n$a_slope.i,c(1,1),
df_compfac.n$Nmax.i)
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.i
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i) %>%
rownames_to_column(var="g")
df_compfac.n.i
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.i
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
rownames_to_column(var="g")%>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
df_compfac <- NA
for( i in 1:length(params)){
for( function.int in 1:4){
p <- params[[i]]
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n$value.fct1 <-  c(df_compfac.n$a_initial)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial,df_compfac.n$a_slope,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct3 <-  c(alpha_function3(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct4 <-  c(alpha_function4(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac <- bind_rows(df_compfac,df_compfac.n)
}
}
i
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.i
df_compfac.n.j
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n$value.fct1 <-  c(df_compfac.n$a_initial)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial,df_compfac.n$a_slope,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct3 <-  c(alpha_function3(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct4 <-  c(alpha_function4(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n
df_compfac <- bind_rows(df_compfac,df_compfac.n)
df_compfac <- NULL
for( i in 1:length(params)){
for( function.int in 1:4){
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n$value.fct1 <-  c(df_compfac.n$a_initial)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial,df_compfac.n$a_slope,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct3 <-  c(alpha_function3(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct4 <-  c(alpha_function4(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac <- bind_rows(df_compfac,df_compfac.n)
}
}
df_compfac.n <-  df_compfac.n %>%
gather(value.fct1,value.fct2,value.fct3,value.fct4, key="function",value="alpha.value")
df_compfac <-  df_compfac %>%
gather(value.fct1,value.fct2,value.fct3,value.fct4, key="function",value="alpha.value")
df_compfac <- NULL
for( i in 1:length(params)){
for( function.int in 1:4){
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n$value.fct1 <-  c(df_compfac.n$a_initial)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial,df_compfac.n$a_slope,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct3 <-  c(alpha_function3(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct4 <-  c(alpha_function4(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac <- bind_rows(df_compfac,df_compfac.n)
}
}
df_compfac <-  df_compfac %>%
gather(value.fct1,value.fct2,value.fct3,value.fct4, key="function.int",value="alpha.value")
ggplot(df_compfac[which(df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(function.int)
summary(df_compfac$alpha.value)
ggplot(df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(as.factor(function.int))
str(df_compfac)
df_compfac <- NULL
for( i in 1:length(params)){
for( function.int in 1:4){
df_compfac.n.i <- as.data.frame(params[[i]]) %>%
dplyr::select( Nmax.i, a_slope.i,a_initial.i,c.i)
names(df_compfac.n.i) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n.j <- as.data.frame(params[[i]]) %>%
dplyr::select(Nmax.j, a_slope.j,a_initial.j,c.j)
names(df_compfac.n.j) <- c("Nmax","a_slope","a_initial","c")
df_compfac.n <- bind_rows(df_compfac.n.i,df_compfac.n.j)
df_compfac.n$value.fct1 <-  c(df_compfac.n$a_initial)
df_compfac.n$value.fct2 <-  c(alpha_function2(df_compfac.n$a_initial,df_compfac.n$a_slope,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct3 <-  c(alpha_function3(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac.n$value.fct4 <-  c(alpha_function4(df_compfac.n$a_initial,df_compfac.n$a_slope,df_compfac.n$c,c(1,1),
df_compfac.n$Nmax))
df_compfac <- bind_rows(df_compfac,df_compfac.n)
}
}
df_compfac <-  df_compfac %>%
gather(c(value.fct1,value.fct2,value.fct3,value.fct4), key="function.int",value="alpha.value")
str(df_compfac)
ggplot(df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(as.factor(function.int))
levels(as.factor(df_compfac$function.int))
ggplot(df_compfac[which(df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(as.factor(function.int))
levels(as.factor(df_compfac[which(df_compfac$function.int != "value.fct1"),]))
levels(as.factor(df_compfac$function.int[which(df_compfac$function.int != "value.fct1"),]))
levels(as.factor(df_compfac$function.int[which(df_compfac$function.int != "value.fct1")]))
ggplot(df_compfac[which(df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(~as.factor(function.int))
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=Nmax,fill=alpha.value)) +
geom_tile() +
facet_grid(~as.factor(function.int))
df_compfac$alpha.value
str(df_compfac)
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=c,fill=alpha.value)) +
geom_tile() +
facet_grid(~as.factor(function.int))
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=c,fill=alpha.value)) +
geom_tile() +
theme_ipsum() +
facet_grid(~as.factor(function.int))
library(hrbrthemes)
install.packages(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
library(ggplot2)
library(tidyr)
library(tibble)
library(hrbrthemes)
library(dplyr)
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=c,fill=alpha.value)) +
geom_tile() +
theme_ipsum() +
facet_grid(~as.factor(function.int))
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$Nmax ==1 &
df_compfac$a_initial ==0.5 &
df_compfac$function.int != "value.fct1"),],
aes(x=a_slope,y=c,fill=alpha.value)) +
geom_tile() +
theme_ipsum() +
facet_grid(~as.factor(function.int))
ggplot(df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$Nmax ==1 &
df_compfac$a_initial ==0.5 &
df_compfac$function.int == "value.fct4"),],
aes(x=a_slope,y=c,fill=alpha.value)) +
geom_tile() +
theme_ipsum()
df_compfac[which(df_compfac$alpha.value <2 &
df_compfac$Nmax ==1 &
df_compfac$a_initial ==0.5 &
df_compfac$function.int == "value.fct4"),]
df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$Nmax == 1 &
df_compfac$a_initial == - 0.5 &
df_compfac$function.int == "value.fct4"),]
ggplot(df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$Nmax == 1 &
df_compfac$a_initial == -0.5 &
df_compfac$function.int == "value.fct4"),]
df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$Nmax == 1 &
df_compfac$a_initial == -0.5 &
df_compfac$function.int == "value.fct4"),]
df_compfac[which(df_compfac$alpha.value < 2 &
df_compfac$Nmax == 5 &
df_compfac$a_initial == -0.5 &
df_compfac$function.int == "value.fct4"),]
#---- 1.2. Import the competitive data ----
competition <- read.csv("/Users/lisabuche/Documents/Projects/Bendering/data/Bendering2022_competition.csv",
header = T,stringsAsFactors = F, sep=",",
na.strings=c("","NA"))
competition <- competition %>%
fill(year, day, month, block, unique.plot) %>%   # extend values of year, plot, subplot, etc
group_by(year,day,month,block,unique.plot) %>%
mutate(individual = row_number()) %>%
ungroup() %>%
separate_rows(neighbourhood, sep = "/",
convert = FALSE) %>%  # separate the competitors in ultiple rows
separate( neighbourhood,sep = "_",
into = c("competitor", "abundance")) %>%
spread(key=abundance,value=competitor)
# change the format of the rows to numeric
cols.num <- names(competition)[which(!names(competition) %in% c("focal"))]
competition <- as.data.frame(competition)
competition[cols.num] <- sapply(competition[cols.num],as.numeric)
# change na values to 0
competition[is.na(competition)] <- 0
#---- 1.2. Import the seeds data ----
fecundity.df <- read.csv("/Users/lisabuche/Documents/Projects/Bendering/data/Bendering2022_seeds.csv",
header = T,stringsAsFactors = F, sep=",",
na.strings=c("","NA"))
fecundity.df <- fecundity.df %>%
fill(year, block, focal)  # extend values of year, plot, subplot, etc
fecundity.df$block <- as.factor(fecundity.df$block)
seeds.model <- glmer(viable.seeds ~ (1|block) + focal*tot.flowers ,fecundity.df,
family="poisson")
summary(seeds.model) # random block effect not signidicant - not considered further
seeds.graph <- ggplot(fecundity.df,aes(y=viable.seeds,x=as.factor(tot.flowers))) +
geom_violin() + facet_grid(.~focal,scales="free")
fecundity.summary <- fecundity.df %>%
group_by(year, focal) %>%
summarise(mean.seed=mean(viable.seeds), st.dev.seed = sd(viable.seeds),
n= length(viable.seeds),
mean.flower=mean(tot.flowers),
st.dev.seed= sd(tot.flowers))%>%
ungroup()
focal.levels <- levels(as.factor(competition$focal))
competition.seeds = data.frame()
for(focal in focal.levels){
competition.n <- subset(competition, competition$focal == focal)
competition.n$seeds <-  competition.n$flower*
rnorm(nrow(competition.n),
mean=fecundity.summary$mean.seed[which(fecundity.summary$focal==focal)],
sd = fecundity.summary$st.dev.seed[which(fecundity.summary$focal==focal)])
competition.seeds <- rbind(competition.seeds,competition.n)
}
ggplot(competition.seeds,aes(x=seeds, color= focal) ) + geom_density()
focal.levels <- levels(as.factor(competition$focal))
Spcompetition <- list()
for(focal in focal.levels){
competition.n <- subset(competition, competition$focal == focal)
# multiple by a number randomly draw from a normal distribution following seed production of the focal
competition.n$seeds <-  competition.n$flower*
rnorm(nrow(competition.n),
mean=fecundity.summary$mean.seed[which(fecundity.summary$focal==focal)],
sd = fecundity.summary$st.dev.seed[which(fecundity.summary$focal==focal)])
#save(competition.n,
#     paste0("results/stan/Competition_seeds_2022_",focal,".csv"))
Spcompetition[[focal]] <- competition.n
}
print(paste(Code.focal,", function",function.int))
Code.focal = "HYGA"
function.int = 1
print(paste(Code.focal,", function",function.int))
function.vec <- c(0,0,0,0)
function.vec[function.int] <- 1
# data for the focal
SpDataFocal <- Spcompetition[[Code.focal]]
# Next continue to extract the data needed to run the model.
N <- as.integer(nrow(SpDataFocal))
Fecundity <- as.integer(SpDataFocal$seeds)
# Now calculate the total number of plant species to use for the model, discounting
#       any species columns with 0 abundance. Save a vector of the species names
#       corresponding to each column for easy matching later.
AllSpNames <- names(SpDataFocal)[!names(SpDataFocal) %in% c("focal","year","day","month",
"block","unique.plot",
"flower","seeds","individual")]
AllSpAbunds <- SpDataFocal %>%
dplyr::select(all_of(AllSpNames))%>%
mutate_at( AllSpNames, as.numeric)
SpTotals <- colSums(AllSpAbunds)
SpToKeep <- SpTotals > 0
NamesSpToKeep <-names(SpToKeep)
S <- sum(SpToKeep)
#SpMatrix <- matrix(NA, nrow = N, ncol = S)
#i <- 1
#for(s in 1:ncol(AllSpAbunds)){
#if(SpToKeep[s] == 1){
# SpMatrix[,i] <- AllSpAbunds[,s]
#  i <- i + 1
# }else{next}
#}
S <- 1+length(focal.levels)
SpMatrix <- as.data.frame(matrix(NA, nrow = N, ncol = S ))
#i <- 1
for(i in 1:N){
SpMatrix[i,1] <- sum(AllSpAbunds[i,NamesSpToKeep[!NamesSpToKeep %in% focal.levels]])
SpMatrix[i,c(2:S)] <- AllSpAbunds[i,focal.levels]
}
names(SpMatrix) <-c("Neighbours",focal.levels)
SpMatrix <- as.matrix(SpMatrix)
SpNames <- AllSpNames[SpToKeep]
SpNames <-c("Neighbours",focal.levels)
#assign(paste0("SpNames_",FocalPrefix),
#     SpNames)
Intra <- ifelse(SpNames == Code.focal, 1, 0)
# max fecundity
Nmax <- c(SpMatrix[which.max(Fecundity),])
# Upper bound intrinsic fecundity
U <- ceiling(log(fecundity.summary$mean.seed[which(fecundity.summary$focal==Code.focal)]))
run_estimation <- 1
alphaFunct1 <- function.vec[1]
alphaFunct2 <- function.vec[2]
alphaFunct3 <- function.vec[3]
alphaFunct4 <- function.vec[4]
alpha.function <- paste0("function_",which(function.vec==1))
DataVec <- list(N=N,
S=S,
U= U,
Nmax=Nmax,
Fecundity=Fecundity,
SpMatrix =SpMatrix,
Intra=Intra,
run_estimation=run_estimation,
alphaFunct1=alphaFunct1,
alphaFunct2=alphaFunct2,
alphaFunct3=alphaFunct3,
alphaFunct4=alphaFunct4
)
##---- 3.2. Run  final fit ----
# Now run a fianl fit of the model to assess parameter
print("Natural Fit beginning")
#install.packages("codetools")
library("codetools")
options(mc.cores = parallel::detectCores())
# defiining initial value of lambda to help with computation failure
# divide by the maximum expected for lambda = U
list.init <- function(...)list(lambdas = array(as.numeric(rnorm(1,
mean=log(fecundity.summary$mean.seed[which(fecundity.summary$focal==Code.focal)]),
sd = abs(log(fecundity.summary$st.dev.seed[which(fecundity.summary$focal==Code.focal)])))/
U),
dim = 1))
if( run.stan == 1){
FinalFit <- stan(file = "code/DensityFunct_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)
save(file= paste0("results/stan/FinalFit_",Code.focal,"_",alpha.function,".rds"),
FinalFit)
}
library(rstan)
#install.packages("HDInterval")
library("HDInterval")
#install.packages("tidyverse")
library("tidyverse")
FinalFit <- stan(file = "code/DensityFunct_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)
FinalFit <- stan(file = "code/DensityFunct_Final.stan",
data = DataVec,
init=  list.init,
warmup= 500,
iter = 1000,
init_r = 2,
chains = 3,
control=list(max_treedepth=15),
seed= 165)

hist(summary(FinalFit)$summary[,"Rhat"],
main = paste("Finat Fit: Histogram of Rhat for",
Code.focal," and ",alpha.function))
hist(summary(FinalFit)$summary[,"n_eff"],
main = paste("Finat Fit: Histogram of Neff for",
Code.focal," and ",alpha.function))
# plot the corresponding graphs
stan_model_check(FinalFit,
param =c('lambdas','c','alpha_initial','alpha_slope','c'))
# Next check the correlation among key model parameters and identify any
pairs(FinalFit, pars = c("lambdas",'alpha_initial','alpha_slope','c'))
dev.off()
#---- 3.4. Extraction interactions coefficients---
density.comp <- data.frame(observations= c(1:nrow(SpDataFocal)),
species.i = SpDataFocal$plants.i,
species.j = SpDataFocal$plants.j)
Alphadistribution.i <- tibble()
Alphadistribution.j <- tibble()
Alphadistribution.i <- data.frame(FinalPosteriors$alpha_value[,,1])
names(Alphadistribution.i) <- c(1:nrow(SpDataFocal))
Alphadistribution.i <- gather(Alphadistribution.i, key="observations",value="alpha.i")
Alphadistribution.i$observations <- as.numeric(Alphadistribution.i$observations)
Alphadistribution.i <- full_join(Alphadistribution.i,density.comp,
by=c("observations"))
Alphadistribution.j <- as.data.frame(FinalPosteriors$alpha_value[,,2])
names(Alphadistribution.j) <- c(1:nrow(SpDataFocal))
Alphadistribution.j <- gather(Alphadistribution.j, key="observations",value="alpha.j")
Alphadistribution.j$observations <- as.numeric(Alphadistribution.j$observations)
Alphadistribution.j <- full_join(Alphadistribution.j,density.comp, by=c("observations"))
Alphadistribution.i <- Alphadistribution.i %>%
group_by(species.i) %>% summarise_at("alpha.i",  list(mean = mean, sd = sd))
Alphadistribution.i <- data.frame(abundance.neighbours = Alphadistribution.i$species.i,
alpha_mean = Alphadistribution.i$mean,
alpha_sd= Alphadistribution.i$sd,
neighbours= "species i",focal = paste("species",Code.focal),
density.function = alpha.function)
Alphadistribution.j <- Alphadistribution.j %>%
group_by(species.j) %>% summarise_at("alpha.j",  list(mean = mean, sd = sd))
Alphadistribution.j <- data.frame(abundance.neighbours = Alphadistribution.j$species.j,
alpha_mean = Alphadistribution.j$mean,
alpha_sd= Alphadistribution.j$sd,
neighbours= "species j",focal = paste("species",Code.focal),
density.function = alpha.function)
Alphadistribution.neighbours <- bind_rows(Alphadistribution.neighbours,Alphadistribution.i,Alphadistribution.j)
#---- 3.4. Extraction fecundity---
Fecunditydistribution.n <- FinalPosteriors %>%
as.data.frame() %>%
dplyr::select(contains("F_sim")) %>%
gather( key="obervation",value="seed")
Fecunditydistribution.n$focal = paste("species",Code.focal)
Fecunditydistribution.n$density.function = alpha.function
Fecunditydistribution <- bind_rows(Fecunditydistribution,Fecunditydistribution.n)
PostFecunditydistribution.n  <- read.csv(paste0("results/PostFec_",Code.focal,"_",alpha.function,".csv.gz"))
PostFecunditydistribution.n$focal <- Code.focal
PostFecunditydistribution.n$alpha.function <- alpha.function
PostFecunditydistribution <- bind_rows(PostFecunditydistribution,PostFecunditydistribution.n)
}
}
AlphadistributionGraph <- ggplot(Alphadistribution.neighbours, aes(x= abundance.neighbours,
y=alpha_mean)) +
geom_smooth(alpha=0.5,se=F, aes(
color=density.function,
fill=density.function)) +
geom_point(aes(
color=density.function,
fill=density.function)) +
#ylim(-5,5)+
geom_hline(yintercept=0,color="dark grey") +
xlim(0,max(Alphadistribution.neighbours$abundance.neighbours)) +
geom_errorbar(aes(ymin=alpha_mean-alpha_sd^2, ymax=alpha_mean+alpha_sd^2,
color=density.function), width=.2,
position=position_dodge(0.05)) +
facet_grid(neighbours ~ focal,scale="free") + theme_bw() +
guides(fill="none")+
scale_color_manual("Density-dependent functions",values=c("black","#CC79A7","#E69F00","#009E73")) +
labs(title="Direct interactions distributions of the 4 density-dependent functions",
y="Resulting effect", x=" Neighbour density ")
AlphadistributionGraph
PostFecundityGraph <- ggplot(PostFecunditydistribution) +
geom_density(aes(x=Fec,
group=iterations,
color=as.factor(alpha.function)),
alpha=0.2) +
geom_density(data = Fecunditydistribution.n , aes(x=seed,
color=as.factor(focal)),
alpha=0.5) +
facet_wrap(focal ~  alpha.function, nrow=2, scales = "free" ) +
scale_x_continuous(limits = function(x) {x + c(-10, 10)}) +
labs(title = " Fecundity distributions for predictions compared to initial data", y ="Density",
x="Fecundity") +  theme_bw() + guides(color="none") +
scale_color_manual(values=c("black","#CC79A7","#E69F00","#009E73",
"blue","red"))
PostFecundityGraph
Fecunditydistribution.n <- data.frame(seed=simdata$fecundity,
focal=simdata$focal,
obervation= NA )
PostFecundityGraph <- ggplot(PostFecunditydistribution) +
geom_density(aes(x=Fec,
group=iterations,
color=as.factor(alpha.function)),
alpha=0.2) +
geom_density(data = Fecunditydistribution.n , aes(x=seed,
color=as.factor(focal)),
alpha=0.5) +
facet_wrap(focal ~  alpha.function, nrow=2, scales = "free" ) +
scale_x_continuous(limits = function(x) {x + c(-10, 10)}) +
labs(title = " Fecundity distributions for predictions compared to initial data", y ="Density",
x="Fecundity") +  theme_bw() + guides(color="none") +
scale_color_manual(values=c("black","#CC79A7","#E69F00","#009E73",
"blue","red"))
PostFecundityGraph <- ggplot(PostFecunditydistribution) +
geom_density(aes(x=Fec,
group=iterations,
color=as.factor(alpha.function)),
alpha=0.2) +
geom_density(data = Fecunditydistribution.n , aes(x=seed,
color=as.factor(focal)),
alpha=0.5) +
facet_wrap(focal ~  alpha.function, nrow=2, scales = "free" ) +
scale_x_continuous(limits = function(x) {x + c(-10, 10)}) +
labs(title = " Fecundity distributions for predictions compared to initial data", y ="Density",
x="Fecundity") +  theme_bw() + guides(color="none") +
scale_color_manual(values=c("black","#CC79A7","#E69F00","#009E73",
"blue","red"))
PostFecundityGraph
save(Alphadistribution.neighbours, file = "results/Alphadistribution.neighbours.csv.gz")
save(Fecunditydistribution, file = "results/Fecunditydistribution.csv.gz")
save(PostFecunditydistribution , file = "results/PostFecunditydistribution.csv.gz")
write_csv(simulated.data,
file = "results/simulated.data.csv")
write_csv(experimental.outcomes,
file = "results/experimental.outcomes.csv")
ggplot(experimental.outcomes) +
geom_density( aes(x=per.capita.fecundity.j),color="red",fill="red",alpha=0.3) +
geom_density( aes(x=per.capita.fecundity.i),color="blue",fill="blue",alpha=0.3)+
xlab("Viable seed, fecundity per individuals") +
theme_bw()
ggplot(experimental.outcomes) +
geom_point( aes(x=biomass.i,y=biomass.j)) +
geom_smooth( aes(x=biomass.i,y=biomass.j),color="grey",alpha=0.6) +
xlim(0.875,1)+
ylim(0,0.6) +
theme_bw()+
labs(title="Biomass of species j in function of biomass of species i")
ggsave("figures/PostFecundityGraph.pdf",
plot = PostFecundityGraph)
AlphadistributionGraph
ggplot(Alphadistribution.neighbours, aes(x= abundance.neighbours,
y=alpha_mean)) +
geom_smooth(alpha=0.5,se=F, aes(
color=density.function,
fill=density.function)) +
geom_point(aes(
color=density.function,
fill=density.function)) +
ylim(-0.1,0.1)+
geom_hline(yintercept=0,color="dark grey") +
xlim(0,max(Alphadistribution.neighbours$abundance.neighbours)) +
geom_errorbar(aes(ymin=alpha_mean-alpha_sd^2, ymax=alpha_mean+alpha_sd^2,
color=density.function), width=.2,
position=position_dodge(0.05)) +
facet_grid(neighbours ~ focal,scale="free") + theme_bw() +
guides(fill="none")+
scale_color_manual("Density-dependent functions",values=c("black","#CC79A7","#E69F00","#009E73")) +
labs(title="Direct interactions distributions of the 4 density-dependent functions",
y="Resulting effect", x=" Neighbour density ")
ggplot(Alphadistribution.neighbours, aes(x= abundance.neighbours,
y=alpha_mean)) +
geom_smooth(alpha=0.5,se=F, aes(
color=density.function,
fill=density.function)) +
geom_point(aes(
color=density.function,
fill=density.function)) +
#ylim(-0.1,0.1)+
geom_hline(yintercept=0,color="dark grey") +
xlim(0,max(Alphadistribution.neighbours$abundance.neighbours)) +
geom_errorbar(aes(ymin=alpha_mean-alpha_sd^2, ymax=alpha_mean+alpha_sd^2,
color=density.function), width=.2,
position=position_dodge(0.05)) +
facet_grid( focal ~ neighbours,scale="free") + theme_bw() +
guides(fill="none")+
scale_color_manual("Density-dependent functions",values=c("black","#CC79A7","#E69F00","#009E73")) +
labs(title="Direct interactions distributions of the 4 density-dependent functions",
y="Resulting effect", x=" Neighbour density ")
ggplot(Alphadistribution.neighbours, aes(x= abundance.neighbours,
y=alpha_mean)) +
geom_smooth(alpha=0.5,se=F, aes(
color=density.function,
fill=density.function)) +
geom_point(aes(
color=density.function,
fill=density.function)) +
#ylim(-0.1,0.1)+
geom_hline(yintercept=0,color="dark grey") +
xlim(0,max(Alphadistribution.neighbours$abundance.neighbours)) +
geom_errorbar(aes(ymin=alpha_mean-alpha_sd^2, ymax=alpha_mean+alpha_sd^2,
color=density.function), width=.2,
position=position_dodge(0.05)) +
facet_grid( focal ~ neighbours,scale="free", switch="both") + theme_bw() +
guides(fill="none")+
scale_color_manual("Density-dependent functions",values=c("black","#CC79A7","#E69F00","#009E73")) +
labs(title="Direct interactions distributions of the 4 density-dependent functions",
y="Resulting effect", x=" Neighbour density ")
AlphadistributionGraph <- ggplot(Alphadistribution.neighbours, aes(x= abundance.neighbours,
y=alpha_mean)) +
geom_smooth(alpha=0.5,se=F, aes(
color=density.function,
fill=density.function)) +
geom_point(aes(
color=density.function,
fill=density.function)) +
#ylim(-0.1,0.1)+
geom_hline(yintercept=0,color="dark grey") +
xlim(0,max(Alphadistribution.neighbours$abundance.neighbours)) +
geom_errorbar(aes(ymin=alpha_mean-alpha_sd^2, ymax=alpha_mean+alpha_sd^2,
color=density.function), width=.2,
position=position_dodge(0.05)) +
facet_grid( focal ~ neighbours,scale="free", switch="both") + theme_bw() +
guides(fill="none",color="none")+
scale_color_manual("Density-dependent functions",values=c("black","#CC79A7","#E69F00","#009E73")) +
labs(title="Direct interactions distributions of the 4 density-dependent functions",
y="Resulting effect", x=" Neighbour density ")
AlphadistributionGraph
head(experimental.outcomes)
ggplot(experimental.outcomes) +
geom_point( aes(x=starting.plants.i.i,y=ending.plants.i))
ggplot(experimental.outcomes) +
geom_point( aes(x=starting.plants.i,y=ending.plants.i))
ggplot(experimental.outcomes) +
geom_point( aes(x=starting.plants.j,y=ending.plants.j))
#
# Shiny app build by Lisa Buche - April 2023
#This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Install the packages below if you do not have these already installed.
#install.packages('tidyverse')
#install.packages('medicaldata')
#install.packages('shiny')
#install.packages('mlbench')
#install.packages('plotly')
#install.packages('ggforce')
library(tidyverse)
library(medicaldata)
library(shiny)
library(mlbench)
library(shiny)
library(plotly)
library(ggplot2)
library(ggpubr)
library(rmarkdown)
library(knitr)
library(pander)
library(ggforce)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Neighbours density-dependent effect on Fecundity - Pairwise example"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
h3("Values of parameters:"),width=3,
sliderInput("Ainit",
label =withMathJax("Initial effect of j on i \\(\\alpha_{0,i,j}:\\)"),
min = -1,
max = 1,
value = 0,
step=0.01),
sliderInput("Aslope",
label =withMathJax("Per capita effect of one neighbours on species i fecundity \\(\\alpha_{J}:\\)"),
min = -1,
max = 1,
value = 0.8,
step=0.01),
sliderInput("N0",
label =withMathJax("Initial density of \\(N_{0,j}:\\)"),
min = 0,
max = 10,
value = 5,
step=1),
sliderInput("Ni",
label =withMathJax("Density of \\(N_{i}:\\)"),
min = 0,
max = 10,
value = 0,
step=1),
#sliderInput("m",
#           label ="value of m:",
#           min = 0,
#          max = 1,
#          value = 0.5,
#         step=0.01),
sliderInput("c",
label ="Value of c:",
min = 0,
max = 1,
value = 0.2,
step=0.01),
sliderInput("RangeNj",
label = withMathJax("Range of Neighbour density \\(N_{j}:\\)"),
min = -10, max = 50, value = c(0, 20),
step = 1),
sliderInput("lambda",
label ="Lambda value (intrinsic fecundity):",
min = 0,
max = 10,
value = 5,
step=1)
),
# Show a plot of the generated distribution
mainPanel(   h3("Community dynamics:"),width=9,
br(),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
column(5,
uiOutput("ComDyn")),
column(4,
uiOutput("Conditions"),
radioButtons("functiontype", h3("Select function type to display fecundity:"),
choices = list("Function 1" = 1, "Function 2" = 2,
"Function 3" = 3,"Function 4" = 4),
selected = 1)
)
)
),
br(),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
tags$b("Graphs of the 4 functions:"),
tags$b("Graphs of fecundity of species i in fucntion of Nj:"))
),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("plotfunctions"),
plotOutput("Fecundityplot"))
),
br()
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
half.signoidal.function <- function(Amin, Aslopes,c ,N,N0){
#alpha = Amin - (exp(Aslopes*N)/(1 + abs(exp(Aslopes*N - c))))
#alpha = Amin/(1 + exp(-Aslopes*(N)))
#alpha = log(Aslopes*N + 1) + Amin - c
alpha = Amin+Aslopes*(1-exp(-c*(N-N0)))
#alpha = sqrt(Aslopes*N + Amin)
return(alpha)
}
signoidal.function <- function(Amin, Aslopes, c ,N,N0){
#alpha = Amin - (exp(Aslopes*N)/(1 + abs(exp(Aslopes*N - c))))
#alpha = Amin*(exp(-Aslopes*(N-N0)) /(1 + exp(-Aslopes*(N-N0) - c )))
#e = exp(-c*(N-N0)) # c is stretching the graph horizontally and N0 is translating the graph
#a = -Aslopes*e #stretching the graph vertically
e = exp(-Aslopes*(N-N0)) # c is stretching the graph horizontally
a = c*(1-e) #stretching the graph vertically
d = Amin
alpha = (a/(1 + e)) + d
return(alpha)
}
functions.plot <- function(Amin, Aslopes, c ,N,N0){
f1 <- ggplot(data.frame(N= N, alpha = Amin), aes(y=alpha, x= N))+
geom_line(aes(colour = after_stat(y < 0)))+
guides(color="none") + labs(title="function 1") +
geom_hline(yintercept=0,linetype="dashed") +
xlab("Neighbour density of j") + ylab("Resulting effect of j on i") +
theme_bw() +
if(Amin <0){
scale_colour_manual(
values = c("red"))
}else{   scale_colour_manual(
values = c("limegreen")) }
f2 <- ggplot(data.frame(N= N, alpha = (Amin + Aslopes*(N-N0))),
aes(y=alpha, x= N))+
geom_line(aes(colour = after_stat(y < 0)))+
guides(color="none") + labs(title="function 2") +
geom_hline(yintercept=0,linetype="dashed") +
xlab("Neighbour density of j") + ylab("Resulting effect of j on i")+
theme_bw() +
if(all((Amin + Aslopes*N) < 0)){
scale_colour_manual(
values = c("red"))
}else{scale_colour_manual(
values = c("limegreen","red")) }
f3 <- ggplot(data.frame(N= N, alpha =  half.signoidal.function(Amin, Aslopes,c ,N,N0)),
aes(y=alpha, x= N))+
#geom_smooth(alpha=0.8,color="grey") +
labs(title="function 3") +
geom_hline(yintercept=0,linetype="dashed") +
geom_point(alpha=0.5,shape=20,aes(colour = after_stat(y < 0)))+
guides(color="none") +
xlab("Neighbour density of j") + ylab("Resulting effect of j on i")+
theme_bw()+
if(all( half.signoidal.function(Amin, Aslopes,c ,N,N0) < 0)){
scale_colour_manual(
values = c("red"))
}else{scale_colour_manual(
values = c("limegreen","red")) }
f4 <- ggplot(data.frame(N= N, alpha = signoidal.function(Amin, Aslopes,c ,N,N0)),
aes(y=alpha, x= N))+
#geom_smooth(alpha=0.8,color="grey") +
labs(title="function 4") +
geom_point(alpha=0.5,shape=20,aes(colour = after_stat(y < 0)))+
guides(color="none") +
geom_hline(yintercept=0,linetype="dashed") +
xlab("Neighbour density of j") + ylab("per capita effect of j on i")+
theme_bw()+
if(all(signoidal.function(Amin, Aslopes,c ,N,N0) < 0)){
scale_colour_manual(
values = c("red"))
}else{scale_colour_manual(
values = c("limegreen","red")) }
ggarrange(f1,f2,f3,f4,ncol=2,nrow=2)
}
fecundity.plot <- function(function.alpha,lambda,
Amin, Aslopes, c ,Nj,Ni,Ni0,Nj0){
if(function.alpha == 1){
aii <- 0.2
aij <- Amin
}
if(function.alpha == 2){
aii <- 0.2 + 0.2*(Ni-Ni0)
aij <- Amin + Aslopes*(Nj-Nj0)
}
if(function.alpha == 3){
aii <- half.signoidal.function(-0.2, -0.2,c ,Ni,N0 =Ni0)
aij <- half.signoidal.function(Amin, Aslopes,c ,Nj,N0 =Nj0)
}
if(function.alpha == 4){
aii <- signoidal.function(-0.2, -0.2, c ,Ni,N0 =Ni0)
aij <- signoidal.function(Amin, Aslopes,c ,Nj, N0 =Nj0)
}
Fi <- lambda + aii*Ni + aij*Nj
return(Fi)
}
output$Conditions <- renderUI({
withMathJax(
paste0("Conditions to respect:"),
br(),
paste0(" (1) If \\( N_j =0 \\) and \\( N_i =0  =>  F_i = \\lambda_i\\) "),
br()
)
}
)
output$ComDyn <- renderUI({
x <- input$Ainit
y <- input$Aslope
Ni <- input$Ni
withMathJax(
paste0("Equations of community dynamics"),
paste0("Fecundity distribution: \\( F_i = \\lambda_i * e^{\\alpha_{ii}N_i} * e^{\\alpha_{ij}N_j} \\)"),
br(),
paste0("function 1: \\({\\alpha}_{ij} = \\alpha_{ 0,i,j} \\)"),
br(),
paste0("function 2: \\({\\alpha}_{ij} = \\alpha_{ 0,i,j} + \\alpha_{J} * (N_j - N_{0,j}) \\)"),
br(),
paste0("function 3: \\({\\alpha}_{ij} =  \\alpha_{ 0,i,j} + \\alpha_{J}*(1-e^{-c({N}_{j}-N_{0,j})} \\)"),
br(),
br(),
paste0("function 4: \\({\\alpha}_{ij} = \\alpha_{ 0,i,j} - \\dfrac{c*(1-e^{-\\alpha_{J}({N}_j- N_{0,j})})}{1+e^{-\\alpha_{J}({N}_j - N_{0,j})}}\\)"),
br(),
paste0("Interaction of j on i when neighbourhood density \\({N}_j = 0\\), is equal to (\\(\\alpha_{ 0,i,j}\\))  :", x),
br(),
paste0("Interaction of j on i increases per capita by (\\(\\alpha_{J}\\)) :", y),
br(),
paste0("Neighbours density of species i (conspecific density) is kept constant (\\(N_{i}\\)) :",Ni),
br(),
paste0("Intrapecfic parameters are kept constant, \\( \\alpha_{0,i,i} = -0.2 ; \\alpha_{N_{i}} = -0.2 \\)")
)
})
output$plotfunctions <- renderPlot({
Ainit =input$Ainit
Aslopes = input$Aslope
c = input$c
N0 = input$N0
Ni = input$Ni
functions.plot(Amin =Ainit, Aslopes =Aslopes,
c=c ,N=seq(input$RangeNj[1],
input$RangeNj[2],0.25),
N0=N0)
}, res = 96)
output$Fecundityplot<- renderPlot({
Amin =input$Ainit
Aslopes = input$Aslope
c = input$c
Nj0= input$N0
Ni0= 0
Ni = input$Ni
Nj = seq(input$RangeNj[1],
input$RangeNj[2],1)
lambda = input$lambda
function.alpha= input$functiontype
ggplot(data.frame(Nj = Nj,
fecundity =  fecundity.plot(function.alpha=function.alpha,lambda=lambda,
Amin=Amin, Aslopes=Aslopes,
c =c,Nj=Nj,Ni=Ni,Ni0=Ni0,Nj0 = Nj0)),
aes(y=fecundity, x= Nj))+
#geom_smooth(alpha=0.8,color="grey") +
labs(title="Fecundity distribution") +
geom_point() +
xlab("Neighbour density of species j") + ylab("Fecundity of species i")+
theme_bw()
}, res = 96)
}
# Run the application
shinyApp(ui = ui, server = server)

state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N0)) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
head(out)
state= c(Ni=1,Nj=1)
N.init <- c(1,5,10)
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N.init[i])) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
head(out)
out %>%
gather(Ni,Nj, pop, abundance) %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var, linetype=N0)) +
geom_point(aes(color = var, linetype=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = var, linetype=N0)) +
geom_point(aes(color = var, linetype=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = pop, linetype=N0)) +
geom_point(aes(color = pop, linetype=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = pop)) +
geom_line(aes(color = pop, linetype=N0)) +
geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(color = pop, linetype=N0)) +
geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop, linetype=N0)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
head(out)
n <- out[which(out$N0 == 1), 2]
t.num*10
n <- n[901:1000]
ntp1 <- n[-1]
nt <- n[-length(n)]
qplot(nt, ntp1, geom=c("point", "path") ) + labs(y="N[t+1]", x="N[t]")
p[["function.int"]]
Ricker_solution_ODE<- function(t, state, pars){
with(as.list(c(state, pars)), {
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1]*Ni + aij *g[2]*Nj)
Fj <-  exp(lambda[2] + ajj * g[2]*Nj + aji *g[1]*Ni)
Ni.diff <- ((1-g[1]) * s[1] + g[1] * Fi)*Ni
Nj.diff <- ((1-g[2]) * s[2] + g[2] * Fj)*Nj
return(list(c(x = Ni.diff, y = Nj.diff)))
})
}
state= c(Ni=1,Nj=1)
N.init <- c(1,5,10)
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N.init[i])) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
test_plot <-  out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop, linetype=N0)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
test_plot
a
n <- out[which(out$N0 == 1), 2]
n <- n[901:1000]
ntp1 <- n[-1]
nt <- n[-length(n)]
qplot(nt, ntp1, geom=c("point", "path") ) +
labs(y="N[t+1]", x="N[t]")
p[["function.int"]] <- 1 # function.int
state= c(Ni=1,Nj=1)
N.init <- c(1,5,10)
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N.init[i])) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
test_plot <-  out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop, linetype=N0)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
test_plot
p
i  = 2
p <- params[[i]]
p[["function.int"]] <- 1 # function.int
state= c(Ni=1,Nj=1)
N.init <- c(1,5,10)
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N.init[i])) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
test_plot <-  out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop, linetype=N0)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
test_plot
p[["function.int"]] <- 4 # function.int
state= c(Ni=1,Nj=1)
N.init <- c(1,5,10)
out <- NULL
for(i in  1:3){
# project the population
state <- c(Ni=N.init[i],Nj=N.init[i])
# project the population
a <- deSolve::ode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
b <- data.frame(a, N0=as.factor(N.init[i])) # b now has cols: t, N, rd
# store data in rows of out "bind rows" with rbind
out <- rbind.data.frame(out, b)
}
test_plot <-  out %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop, linetype=N0)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
labs(title = "Ricker model",
#subtitle = paste(names(pars), pars, sep = " = ", collapse = "; "),
x = "Time", y = "Population density")
test_plot
#---- Abundance through time for all scenario----
df.sim[which(df.sim$sim.i == sim &
df.sim$function.int == 4),] %>%
gather(Ni, Nj, key=species, value=abundance) %>%
ggplot(aes(y=abundance, x=time)) + #geom_point() +
geom_smooth(aes(y=abundance,color=species,fill=species),
alpha=0.2,size=0.5, linetype="dashed") +
geom_line(aes(y= abundance,color=species), alpha=0.8) +
xlim(c(0,100)) +
theme_bw() + facet_wrap(as.factor(invader)~., scales="free") +
scale_colour_colorblind() +
scale_fill_colorblind() +
labs(title="abundances Ni and Nj over time")
# project the population
a <- deSolve::lsode(y = state, times = seq(1,t.num*10,by=1),
func = Ricker_solution_ODE, parms = p, method = "euler")
install.packages("DChaos")
library(DChaos)
lyapunov(df.stability.n.gam$y)
Exponent <- DChaos::lyapunov(df.stability.n.gam$y,timelapse="FIXED", h=2:10, w0maxit=100,
wtsmaxit=1e6, pre.white=TRUE, lyapmethod="SLE", blocking="ALL",
B=100, trace=1, seed.t=TRUE, seed=56666459, doplot=FALSE)
summary(Exponent)
Exponent <- DChaos::lyapunov(df.stability.n.gam$y,timelapse="FIXED", h=2:10, w0maxit=100,
wtsmaxit=1e6, pre.white=TRUE, lyapmethod="SLE", blocking="ALL",
B=100, trace=1, seed.t=TRUE, seed=56666459, doplot=T)
Exponent <- DChaos::lyapunov(df.stability.n.gam$Ni,timelapse="FIXED")
summary(Exponent)
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 4),]
Exponent <- DChaos::lyapunov(df.stability.n$Ni,timelapse="FIXED")
summary(Exponent)
mean(0.6730811,-0.7458789,-1.8950923)
Exponent <- DChaos::lyapunov(log(df.stability.n$Ni),timelapse="FIXED")
summary(Exponent)
Exponent$exponent.mean
Exponent$exponent.mean[,"Estimate "]
Exponent$exponent.mean[,"Estimate"]
mean(Exponent$exponent.mean[,"Estimate"])
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 1),]
Exponent <- DChaos::lyapunov(log(df.stability.n$Ni),timelapse="FIXED")
summary(Exponent)
mean(Exponent$exponent.mean[,"Estimate"])
mean(Exponent$exponent.mean[,"Estimate"])
df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both" &
(df.sim$function.int == 4 |
df.sim$function.int == 1)),] %>%
gather(Ni, Nj, key=species, value=abundance) %>%
ggplot(aes(y=abundance, x=time)) + #geom_point() +
geom_smooth(aes(y=abundance,color=species,fill=species),alpha=0.2,size=0.5, linetype="dashed") +
geom_line(aes(y= abundance,color=species),alpha=0.8) +
theme_bw() + facet_wrap(function.int~.) +
scale_colour_colorblind() +
xlim(c(0,100)) +
scale_fill_colorblind() +
labs(title="abundances Ni and Nj over time when
Ni = Nj = 0 at t=0")
ggsave(last_plot(),
file = "figures/example.oscillatory.state.pdf")
#---- Abundance through time----
example.oscillatory.state <- df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both" &
(df.sim$function.int == 4 |
df.sim$function.int == 1)),] %>%
gather(Ni, Nj, key=species, value=abundance) %>%
ggplot(aes(y=abundance, x=time)) + #geom_point() +
geom_smooth(aes(y=abundance,color=species,fill=species),alpha=0.2,size=0.5, linetype="dashed") +
geom_line(aes(y= abundance,color=species),alpha=0.8) +
theme_bw() + facet_wrap(function.int~.) +
scale_colour_colorblind() +
xlim(c(0,100)) +
scale_fill_colorblind() +
labs(title="abundances Ni and Nj over time when
Ni = Nj = 0 at t=0")
ggsave(example.oscillatory.state,
file = "figures/example.oscillatory.state.pdf")
GRWR.list <- list()
for(function.int in c(1:4)){
par.dat <- params[[sim]]
GRWR.list[[function.int]] <- df.sim[which(df.sim$sim.i == 20 &
df.sim$invader == "both" &
df.sim$function.int == function.int),] %>%
gather(dNi, dNj, key=species, value=GR) %>%
ggplot(aes(y=GR, x=time))  +
xlim(c(0,100)) +
geom_line(aes(y=GR,color=species),alpha=0.7,size=1)  +
geom_vline(aes(xintercept=1),linetype="dashed",color="black",alpha=0.7) +
theme_bw() + scale_colour_colorblind() +
guides(alpha="none") +
labs(title=paste0("GRWR at each time step for Ni and Nj \n for sim ",sim," and function ",function.int))
}
example.GR.all.timesteps <- ggarrange(plotlist = GRWR.list, ncol=2, nrow=2,common.legend = T,
legend = "right")
ggsave(example.GR.all.timesteps,
file = "figures/example.GR.all.timesteps.pdf")
#---- Ni dependency on Nj ----
NINJ.list <- list()
for(function.int in c(1:4)){
par.dat <- params[[sim]]
NINJ.list[[function.int]] <- df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both" &
df.sim$function.int == function.int ),]  %>%
ggplot(aes(Ni, Nj)) +
geom_path(aes(colour = as.numeric(time))) +
facet_wrap(function.int~.) +
theme_bw() +
labs(title=paste0("Abundance at each time step
for Ni and Nj \n
for sim ",sim,
" and function ",function.int))
}
example.oscillatory.state.of.abundances <- ggarrange(plotlist =   NINJ.list, ncol=2, nrow=2,common.legend = T,
legend = "right")
ggsave(example.oscillatory.state.of.abundances,
file = "figures/example.oscillatory.state.of.abundances.pdf")
df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both" &
df.sim$function.int == function.int),]  %>%
ggplot(aes(dNi, dNj)) +
geom_path(aes(colour = as.numeric(time))) +
facet_wrap(function.int~.) +
theme_bw()
example.oscillatory.state.of.GR <- df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both" &
df.sim$function.int == function.int),]  %>%
ggplot(aes(dNi, dNj)) +
geom_path(aes(colour = as.numeric(time))) +
facet_wrap(function.int~.) +
theme_bw()
ggsave(example.oscillatory.state.of.GR,
file = "figures/example.oscillatory.state.of.GR.pdf")
example.oscillatory.boundaries <- ggarrange( ncol=2, nrow=1,
df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both"),]  %>%
mutate(Nj2 = c(Nj[-1],NA))%>%
ggplot(aes(Nj, Nj2)) +
geom_path(aes(colour = as.numeric(time))) +
facet_wrap(function.int~., scales="free") +
labs(title="Nj boundaries", x= "N(t+1)", y = " N(t)") +
theme_bw(),
df.sim[which(df.sim$sim.i == sim &
df.sim$invader == "both"),]  %>%
mutate(Ni2 = c(Ni[-1],NA)) %>%
ggplot(aes(Ni, Ni2)) +
geom_path(aes(colour = as.numeric(time))) +
facet_wrap(function.int~., scales="free") +
labs(title="Ni boundaries", x= "N(t+1)", y = " N(t)") +
theme_bw()
)
ggsave(last_plot(),
file = "figures/example.oscillatory.boundaries.pdf")
ggsave(example.oscillatory.boundaries,
file = "figures/example.oscillatory.boundaries.pdf")
ggplot(df.glm_all,aes(x=com.comp.coex,
group=as.factor(function.int),
fill=as.factor(function.int)))+
stat_count()+ theme_bw()  +
scale_fill_colorblind()
com.comp.SLOPE<- ggplot(df.glm_all,aes(x=com.comp.coex,
group=as.factor(function.int),
fill=as.factor(function.int)))+
stat_count()+ theme_bw()  +
scale_fill_colorblind()
ggsave(com.comp.SLOPE,
file = "figures/com.comp.SLOPE.pdf")
int_sensitivity_plot
ggsave("figures/sensitivity_analysis.pdf", width = 10, height = 8)
prediction.Slopes <- ggplot(df, aes(function.int, prediction)) +
geom_errorbar(aes(ymin = lower, ymax = upper),
width = 0.25, size = 1, position = position_dodge(width = 0.4)) +
geom_point(shape = 21, size = 3,
position = position_dodge(width = 0.4)) +
theme_light(base_size = 16) +
scale_y_continuous(name = "Probability of coexistence", limits = c(0, 1),
labels = scales::percent)
ggsave("figures/prediction.Slopes.pdf"
,width = 10, height = 8)
example.abundance.scenarios <- df.sim[which(df.sim$sim.i == sim &
df.sim$function.int == 4),] %>%
gather(Ni, Nj, key=species, value=abundance) %>%
ggplot(aes(y=abundance, x=time)) + #geom_point() +
geom_smooth(aes(y=abundance,color=species,fill=species),
alpha=0.2,size=0.5, linetype="dashed") +
geom_line(aes(y= abundance,color=species), alpha=0.8) +
xlim(c(0,100)) +
theme_bw() + facet_wrap(as.factor(invader)~., scales="free") +
scale_colour_colorblind() +
scale_fill_colorblind() +
labs(title="abundances Ni and Nj over time")
ggsave(example.abundance.scenarios,
file = "figures/example.abundance.scenarios.pdf")
prediction.Slopes <- ggplot(df, aes(function.int, prediction)) +
geom_errorbar(aes(ymin = lower, ymax = upper),
width = 0.25, size = 1, position = position_dodge(width = 0.4)) +
geom_point(shape = 21, size = 3,
position = position_dodge(width = 0.4)) +
theme_light(base_size = 16) +
scale_y_continuous(name = "Probability of coexistence", limits = c(0, 1),
labels = scales::percent)
ggsave(prediction.Slopes,
"figures/prediction.Slopes.pdf")
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 1
& df.stability$function.int >10),]
Exponent <- DChaos::lyapunov(log(df.stability.n$Ni),timelapse="FIXED")
head(df.stability.n)
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 1
& df.stability$time > 10),]
Exponent <- DChaos::lyapunov(log(df.stability.n$Ni),timelapse="FIXED")
summary(Exponent)
mean(Exponent$exponent.mean[,"Estimate"])
Lyap <- mean(Exponent$exponent.mean[,"Estimate"])
fLyap <- exp(Lyap)/(1+exp(Lyap))
fLyap
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 4
& df.stability$time > 10),]
Exponent <- DChaos::lyapunov(log(df.stability.n$Ni),timelapse="FIXED")
summary(Exponent)
Lyap <- mean(Exponent$exponent.mean[,"Estimate"])
fLyap <- exp(Lyap)/(1+exp(Lyap))
fLyap
Lyap
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 1
& df.stability$time > 10),]
plot(log(df.stability.n$Ni))
ggplot(df.stability.n, aes( y=Ni, x=time)) + geom_path()
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1")
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
theme_bw()
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 4
& df.stability$time > 10),]
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = abundance)) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
theme_bw()
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = log(abundance))) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
theme_bw()
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 1
& df.stability$time > 10),]
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = log(abundance))) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
theme_bw()
df.stability.n <-  df.stability[which(df.stability$sim== 2 &
df.stability$function.int == 4
& df.stability$time > 10),]
df.stability.n %>%
gather(Ni,Nj, key="pop", value="abundance") %>%
ggplot(aes(x = time, y = log(abundance))) +
geom_line(aes(colour = pop)) +
#geom_point(aes(color = pop, shape=N0)) +
scale_color_brewer(NULL, palette = "Set1") +
theme_bw()
library(shiny); runApp('shiny/functions.R')

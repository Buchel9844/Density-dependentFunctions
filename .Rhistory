names(df) <- c(species)
df$time <- c(0:gens)
return(df)
}
Ricker_solution_NatData(gens = 250,state,pars = param.df)
low
a_initial[low,up]
a_initial
pars
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function4(a_initial[low:up], a_slope[low,up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt
}
Nt1
n.focal
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
Nt
n
n=1
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
a
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Fec
exp(lambda[position.df[n]] + sum(a*g*Nt))
sum(a*g*Nt)
lambda[position.df[n]]
position.df[n]
lambda
lambda <- pars$lambda # intrinsic growth rate
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Fec
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
Nt1
for(t in 1:gens){
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function4(a_initial[low:up], a_slope[low,up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
df
Ricker_solution_NatData <- function(gens,
state,
pars) {
function.int <- pars$function.int[1]
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
a_initial <- pars$alpha_init # which int.function
a_slope <- pars$alpha_slope # which int.function
c <- pars$alpha_c # which int.function
neigh <- levels(as.factor(pars$neigh)) # number of neighbours
n.neigh <- length(neigh)
focal <- levels(as.factor(pars$focal)) # number of focal
n.focal <- length(focal)
position <- c(!neigh %in% focal)
position.df <- 1:n.focal*n.neigh # position of parameter for each focal in the data.frame
df <- data.frame(matrix(data= rep(NA,each=(1+gens)*n.neigh),
ncol=n.neigh, nrow=1+gens))
names(df) <- c(paste0("N",1:n.neigh))
df[1,] <- rep(state,each=n.neigh) #species i initial densities
df[,position] <- 1
for(t in 1:gens){
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function4(a_initial[low:up], a_slope[low,up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
names(df) <- c(species)
df$time <- c(0:gens)
return(df)
}
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection <-  bind_rows(df_projection, df_projection_n)
}
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection <-  bind_rows(df_projection, df_projection_n)
}
head(df_projection )
function.int = 1
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
head(df_projection_n)
param.df
Ricker_solution_NatData <- function(gens,
state,
pars) {
function.int <- pars$function.int[1]
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
a_initial <- pars$alpha_init # which int.function
a_slope <- pars$alpha_slope # which int.function
c <- pars$alpha_c # which int.function
neigh <- levels(as.factor(pars$neigh)) # number of neighbours
n.neigh <- length(neigh)
focal <- levels(as.factor(pars$focal)) # number of focal
n.focal <- length(focal)
position <- c(!neigh %in% focal)
position.df <- 1:n.focal*n.neigh # position of parameter for each focal in the data.frame
df <- data.frame(matrix(data= rep(NA,each=(1+gens)*n.neigh),
ncol=n.neigh, nrow=1+gens))
names(df) <- c(paste0("N",1:n.neigh))
df[1,] <- rep(state,each=n.neigh) #species i initial densities
df[,position] <- 1
for(t in 1:gens){
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function4(a_initial[low:up], a_slope[low,up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
names(df) <- c(neigh)
df$time <- c(0:gens)
return(df)
}
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
head(df_projection_n )
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection <-  bind_rows(df_projection, df_projection_n)
}
function.int
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
param.df
pars = param.df
function.int <- pars$function.int[1]
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
a_initial <- pars$alpha_init # which int.function
a_slope <- pars$alpha_slope # which int.function
c <- pars$alpha_c # which int.function
neigh <- levels(as.factor(pars$neigh)) # number of neighbours
n.neigh <- length(neigh)
focal <- levels(as.factor(pars$focal)) # number of focal
n.focal <- length(focal)
position <- c(!neigh %in% focal)
position.df <- 1:n.focal*n.neigh # position of parameter for each focal in the data.frame
df <- data.frame(matrix(data= rep(NA,each=(1+gens)*n.neigh),
ncol=n.neigh, nrow=1+gens))
names(df) <- c(paste0("N",1:n.neigh))
df[1,] <- rep(state,each=n.neigh) #species i initial densities
df[,position] <- 1
position
position.df
Ricker_solution_NatData <- function(gens,
state,
pars) {
function.int <- pars$function.int[1]
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
a_initial <- pars$alpha_init # which int.function
a_slope <- pars$alpha_slope # which int.function
c <- pars$alpha_c # which int.function
neigh <- levels(as.factor(pars$neigh)) # number of neighbours
n.neigh <- length(neigh)
focal <- levels(as.factor(pars$focal)) # number of focal
n.focal <- length(focal)
position <- c(!neigh %in% focal)
position.df <- 1:n.focal*n.neigh # position of parameter for each focal in the data.frame
df <- data.frame(matrix(data= rep(NA,each=(1+gens)*n.neigh),
ncol=n.neigh, nrow=1+gens))
names(df) <- c(paste0("N",1:n.neigh))
df[1,] <- rep(state,each=n.neigh) #species i initial densities
df[,position] <- 1
for(t in 1:gens){
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function3(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
names(df) <- c(neigh)
df$time <- c(0:gens)
return(df)
}
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection <-  bind_rows(df_projection, df_projection_n)
}
head(  df_projection)
warnings()
Nt1
Nt1 <- c()
for(t in 1:gens){
Nt1 <- c()
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function3(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
Nt1
df
df[251,]
Ricker_solution_NatData <- function(gens,
state,
pars) {
function.int <- pars$function.int[1]
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
a_initial <- pars$alpha_init # which int.function
a_slope <- pars$alpha_slope # which int.function
c <- pars$alpha_c # which int.function
neigh <- levels(as.factor(pars$neigh)) # number of neighbours
n.neigh <- length(neigh)
focal <- levels(as.factor(pars$focal)) # number of focal
n.focal <- length(focal)
position <- c(!neigh %in% focal)
position.df <- 1:n.focal*n.neigh # position of parameter for each focal in the data.frame
df <- data.frame(matrix(data= rep(NA,each=(1+gens)*n.neigh),
ncol=n.neigh, nrow=1+gens))
names(df) <- c(paste0("N",1:n.neigh))
df[1,] <- rep(state,each=n.neigh) #species i initial densities
df[,position] <- 1
for(t in 1:gens){
Nt1 <- c()
Nt <- df[t,!position]  # species i densities
for( n in 1:n.focal){
low= position.df[n]-(n.neigh - 1)
up = position.df[n]
if(function.int==1){
a <- a_initial[low:up]
}
if(function.int==2){
a <- alpha_function2(a_initial[low:up], a_slope[low:up],g*Nt, Nmax[low:up])
}
if(function.int==3){
a <- alpha_function3(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
if(function.int==4){
a <- alpha_function4(a_initial[low:up], a_slope[low:up],c[low:up],g*Nt, Nmax[low:up])
}
Fec[n] <-  exp(lambda[position.df[n]] + sum(a*g*Nt))
Nt1[n] <- ((1-g) * s + g* Fec[n])*Nt[n]
}
df[t+1,!position] <- c(Nt1)
}
names(df) <- c(neigh)
df$time <- c(0:gens)
return(df)
}
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection <-  bind_rows(df_projection, df_projection_n)
}
head( df_projection)
df_projection %>%
gather(focal.levels, key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(~.function.int, cols=2,rows=2,sclaes="free") +
theme_bw()
df_projection %>%
gather(focal.levels, key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(~.function.int, cols=2,rows=2,scales="free") +
theme_bw()
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection_n$function.int <- function.int
df_projection <-  bind_rows(df_projection, df_projection_n)
}
df_projection %>%
gather(focal.levels, key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(~.as.factor(function.int), cols=2,rows=2,scales="free") +
theme_bw()
head(df_projection)
key(df_projection %>%
gather(focal.levels, key="species", value="abundance") )
head(df_projection %>%
gather(focal.levels, key="species", value="abundance") )
df_projection %>%
gather(focal.levels, key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int), cols=2,rows=2,scales="free") +
theme_bw()
df_projection %>%
gather(focal.levels, key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
log(1.215831e+02)
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=log(abundance), x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
focal.levels
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=log(abundance), x= time, group=species, color=species)) +
geom_smooth() + #scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + #scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
param.df$lambda = 1
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection_n$function.int <- function.int
df_projection <-  bind_rows(df_projection, df_projection_n)
}
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
df_projection <- NULL
for (function.int in c(1:4)){
param.df <- df_param_all[which(df_param_all$function.int==function.int),]
param.df$g = 1
param.df$s = 1
param.df$lambda = 2
state = c(1)
df_projection_n <- Ricker_solution_NatData(gens = 250,state,pars = param.df)
df_projection_n$function.int <- function.int
df_projection <-  bind_rows(df_projection, df_projection_n)
}
df_projection %>%
gather(c(focal.levels,"neighbours"), key="species", value="abundance") %>%
ggplot(aes(y=abundance, x= time, group=species, color=species)) +
geom_smooth() + scale_y_log10() +
facet_grid(.~as.factor(function.int),
scales="free") +
theme_bw()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#---- 1. SET UP: Import data, create df with competiton and seed distributions----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
#---- 1.1. Import packages ----
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
#install.packages("HDInterval")
library("HDInterval")
#install.packages("tidyverse")
library("tidyverse")
#install.packages("dplyr")
library(dplyr)
library(ggpubr)
library(ggplot2)
#rstan_options(auto_write = TRUE)
library(tidyr) #fill is part of tidyr
library(lme4)
library(car)
library(loo)
library(wesanderson) # for color palette
library(ggthemes)

}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, g[2]*Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj,g[2]*Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1]*Ni + aij *g[2]*Nj)
Fj <-  exp(lambda[2] + ajj * g[2]*Nj + aji *g[1]*Ni)
Nit1 <- ((1-g[1]) * s[1] + g[1] * Fi)*Ni
Njt1<- ((1-g[2]) * s[2] + g[2] * Fj)*Nj
df[t+1,2:3] <- c(Nit1, Njt1)
}
return(df)
}
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
simdata <- simdata[which(simdata$time == time.exp &
simdata$focal == Code.focal),]
simdata[which.max(simdata$fecundity),]
list.pars <- list()
for( scenario in c("low","medium","high")){
for (function.int in c(1:4)){ # c(1:4)
a_initial <-matrix(nrow=2,ncol=2)
a_slope <-matrix(nrow=2,ncol=2)
c <- matrix(nrow=2,ncol=2)
Nmax <- matrix(nrow=2,ncol=2)
lambda <-c()
for(Code.focal in c("i","j")){ #,"j"
print(paste(scenario, Code.focal,", function",function.int))
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
if(Code.focal =="i"){int.focal <- 1}else{int.focal <- 2}
lambda[int.focal] <- c(summary(FinalFit)$summary["lambdas[1]","mean"])
a_initial[int.focal,] <- c(summary(FinalFit)$summary["alpha_initial[1]","mean"],
summary(FinalFit)$summary["alpha_initial[2]","mean"])
a_slope[int.focal,] <- c(summary(FinalFit)$summary["alpha_slope[1]","mean"],
summary(FinalFit)$summary["alpha_slope[2]","mean"])
c[int.focal,] <- c(summary(FinalFit)$summary["c[1]","mean"],
summary(FinalFit)$summary["c[2]","mean"])
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
simdata <- simdata[which(simdata$time <= time.exp &
simdata$focal == Code.focal),]
Nmax[int.focal,1] <-  simdata[which.max(simdata$fecundity),"plants.i"]
Nmax[int.focal,2] <- simdata[which.max(simdata$fecundity),"plants.j"]
remove(FinalFit )
}
#population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
#Nmax[1] <- population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
#Nmax[2] <- population.dynamics[which(population.dynamics$Time == 2),"Seeds.j"][1]
list.pars[[paste0("pars_",scenario,"_function_",function.int)]] <- append( list(lambda = lambda,
a_slope = a_slope,
a_initial =  a_initial,
c=c,
Nmax = Nmax,
function.int = function.int ),
get(paste0("params.",scenario)))
}
}
Ricker_solution <- function(gens,
state,
pars) {
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
df <- data.frame( t=0:gens,  Ni=numeric(1+gens),  Nj =numeric(1+gens) )
df[1,2:3] <- c(state[1],state[2]) #species i initial densities
for(t in 1:gens){
Ni <- df[t,"Ni"] # species i densities
Nj <- df[t,"Nj"] # species j  densities
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, g[2]*Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj,g[2]*Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1]*Ni + aij *g[2]*Nj)
Fj <-  exp(lambda[2] + ajj * g[2]*Nj + aji *g[1]*Ni)
Nit1 <- ((1-g[1]) * s[1] + g[1] * Fi)*Ni
Njt1<- ((1-g[2]) * s[2] + g[2] * Fj)*Nj
df[t+1,2:3] <- c(Nit1, Njt1)
}
return(df)
}
function.int = 2
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
df <- Ricker_solution(gens= 20,
state=state,
pars=pars)
dfl <- pivot_longer(df, cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=dfl) + geom_line()
pars
state
scenario
pars
state
0.001 *1140.453
exp(7.017591)
list.pars <- list()
for( scenario in c("low","medium","high")){
for (function.int in c(1:4)){ # c(1:4)
a_initial <-matrix(nrow=2,ncol=2)
a_slope <-matrix(nrow=2,ncol=2)
c <- matrix(nrow=2,ncol=2)
Nmax <- matrix(nrow=2,ncol=2)
lambda <-c()
for(Code.focal in c("i","j")){ #,"j"
print(paste(scenario, Code.focal,", function",function.int))
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
if(Code.focal =="i"){int.focal <- 1}else{int.focal <- 2}
lambda[int.focal] <- c(summary(FinalFit)$summary["lambdas[1]","mean"])
a_initial[int.focal,] <- c(summary(FinalFit)$summary["alpha_initial[1]","mean"],
summary(FinalFit)$summary["alpha_initial[2]","mean"])
a_slope[int.focal,] <- c(summary(FinalFit)$summary["alpha_slope[1]","mean"],
summary(FinalFit)$summary["alpha_slope[2]","mean"])
c[int.focal,] <- c(summary(FinalFit)$summary["c[1]","mean"],
summary(FinalFit)$summary["c[2]","mean"])
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
simdata <- simdata[which(simdata$time <= time.exp &
simdata$focal == Code.focal),]
Nmax[int.focal,1] <- 0 #simdata[which.max(simdata$fecundity),"plants.i"]
Nmax[int.focal,2] <- 0 #simdata[which.max(simdata$fecundity),"plants.j"]
remove(FinalFit )
}
#population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
#Nmax[1] <- population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
#Nmax[2] <- population.dynamics[which(population.dynamics$Time == 2),"Seeds.j"][1]
list.pars[[paste0("pars_",scenario,"_function_",function.int)]] <- append( list(lambda = lambda,
a_slope = a_slope,
a_initial =  a_initial,
c=c,
Nmax = Nmax,
function.int = function.int ),
get(paste0("params.",scenario)))
}
}
function.int = 2
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
gens= 20
df <- Ricker_solution(gens= 20,
state=state,
pars=pars)
df$scenario <- scenario
df$function.int <- function.int
dfl <- pivot_longer(df, cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=dfl) + geom_line()
df
pars
-3 * 0.02 * 4
-3 +  0.02 * 4
-0.3 +  0.02 * 4
state
-0.001 + 6.472611e-05 *1.14
7.017591 - 0.22
0.9*0.999 + 0.9 exp(7.017591)
0.9*0.999 + 0.9 *exp(7.017591)
0.9*0.999 + 0.001 *exp(7.017591)
0.9*0.999
pars
df
function.int = 3
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
gens= 20
df <- Ricker_solution(gens= 20,
state=state,
pars=pars)
df$scenario <- scenario
df$function.int <- function.int
df
dfl <- pivot_longer(df, cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=dfl) + geom_line()
exp(7)
exp(7)*exp(-0.22)
7.017591 - 0.22*4
exp(6.137591)
0.89 + 0.4
for( scenario in c("low","medium","high")){
for(function.int in c(1:4)){ # c(1:4)
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
gens= 20
df <- Ricker_solution(gens= 20,
state=state,
pars=pars)
df$scenario <- scenario
df$function.int <- function.int
df_all <- bind_rows(df_all,df)
}
}
df.pop.proj <- NULL
df.pop.proj <- NULL
for( scenario in c("low","medium","high")){
for(function.int in c(1:4)){ # c(1:4)
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
gens= 20
df <- Ricker_solution(gens= 20,
state=state,
pars=pars)
df$scenario <- scenario
df$function.int <- function.int
df.pop.proj <- bind_rows(df.pop.proj,df)
}
}
ggplot(aes(t, N, colour=Population), data=df.pop.proj.l) + geom_line() + facet_grid(function.int ~scenario)
df.pop.proj.l <- pivot_longer(df.pop.proj , cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=df.pop.proj.l) + geom_line() + facet_grid(function.int ~scenario)
ggplot(aes(t, N, colour=Population), data=df.pop.proj.l) + geom_line() +
facet_grid(function.int ~scenario, scale="free")
#---- for high scenario ----
source("code/PopProjection_toolbox.R")
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
plot(df.NiNj)
head(df.NiNj)
log(7)
#---- for high scenario ----
source("code/PopProjection_toolbox.R")
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
plot(df.NiNj)
df.NiNj.l <- pivot_longer(df.NiNj, cols=2:3, names_to="Population", values_to="N")
df.NiNj.l <- pivot_longer(as.data.frame(df.NiNj), cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=df.NiNj.l) + geom_line()
ggplot(aes(time, N, colour=Population), data=df.NiNj.l) + geom_line()
ggplot(aes(time, N, colour=Population), data=df.NiNj.l) + geom_line() +
scale_y_log10()
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[2] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1] * Ni + aij * g[2] * Nj)
Fj <-  exp(lambda[2] + ajj * g[2] * Nj + aji * g[1] * Ni)
dNidt <- (1-g[1]) * s[1] + g[1] * Fi
dNjdt <- (1-g[2]) * s[2] + g[2] * Fj
return(list(c(dNidt,dNjdt)))
}
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
plot(df.NiNj)
head(df.NiNj)
df.NiNj.l <- pivot_longer(as.data.frame(df.NiNj),
cols=2:3, names_to="Population", values_to="N")
ggplot(aes(time, N, colour=Population), data=df.NiNj.l) + geom_line() +
scale_y_log10()
pars
state
head(df.NiNj)
3787.343/3788.652
3788.652 /3787.343
1.000346 - 0.8999
exp(7)
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[2] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1] * Ni + aij * g[2] * Nj)
Fj <-  exp(lambda[2] + ajj * g[2] * Nj + aji * g[1] * Ni)
Ni.diff <- (1-g[1]) * s[1] + g[1] * Fi
Nj.diff <- (1-g[2]) * s[2] + g[2] * Fj
return(list(c(Ni.diff,Nj.diff)))
}
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars,
method = "euler")
head(df.NiNj)
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[2] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1] * Ni + aij * g[2] * Nj)
Fj <-  exp(lambda[2] + ajj * g[2] * Nj + aji * g[1] * Ni)
Ni.diff <- (1-g[1]) * s[1] + g[1] * Fi
Nj.diff <- (1-g[2]) * s[2] + g[2] * Fj
return(list(c(Ni.diff,Nj.diff)))
}
paste0("pars_",scenario,"_function_",function.int)
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]
#---- for high scenario ----
source("code/PopProjection_toolbox.R")
df.pop.proj.l <- pivot_longer(df.pop.proj , cols=2:3, names_to="Population", values_to="N")
ggplot(aes(t, N, colour=Population), data=df.pop.proj.l) + geom_line() +
facet_grid(function.int ~scenario, scale="free")
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars,
method = "euler")
plot(df.NiNj)
df.NiNj.l <- pivot_longer(as.data.frame(df.NiNj),
cols=2:3, names_to="Population", values_to="N")
ggplot(aes(time, N, colour=Population), data=df.NiNj.l) + geom_line() +
scale_y_log10()
state
ggplot(aes(t, N, colour=Population), data=df.pop.proj.l) + geom_line() +
facet_grid(function.int ~scenario, scale="free")
View(df.pop.proj)
Ricker_function <- function(t,
y,
p) {
Ni <- y[1] # species i initial densities
Nj <- y[2] # species j initial densities
with( as.list(p),{
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1] * Ni + aij * g[2] * Nj)
Fj <-  exp(lambda[2] + ajj * g[2] * Nj + aji * g[1] * Ni)
Ni.diff <- (1-g[1]) * s[1] + g[1] * Fi
Nj.diff <- (1-g[2]) * s[2] + g[2] * Fj
return(list(c(Ni.diff,Nj.diff))) })
}
p <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
y <- state.list[[scenario]]  # initial species densities
years = seq(0, 20, by = 1)
Ricker_function <- function(t,
y,
p) {
Ni <- y[1] # species i initial densities
Nj <- y[2] # species j initial densities
with( as.list(p),{
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
aji <- a_initial[2,1]
ajj <- a_initial[2,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[2]*Nj, Nmax[1,2])
aji <- alpha_function2(a_initial[2,1], a_slope[2,1],g[1]*Ni, Nmax[2,1])
ajj <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[2]*Nj, Nmax[2])
aji <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[1]*Ni, Nmax[1])
ajj <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, Nmax[2])
}
Fi <-  exp(lambda[1] + aii * g[1] * Ni + aij * g[2] * Nj)
Fj <-  exp(lambda[2] + ajj * g[2] * Nj + aji * g[1] * Ni)
Ni.diff <- (1-g[1]) * s[1] + g[1] * Fi
Nj.diff <- (1-g[2]) * s[2] + g[2] * Fj
return(list(c(Ni.diff,Nj.diff))) })
}
df.NiNj <- ode(y = y, times = years,
func = Ricker_function, parms = p,
method = "euler")
plot(df.NiNj)
head(df.NiNj)
= seq(0, 20, by = 1)
years

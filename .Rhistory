pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
plot(df.NiNj)
pars
state
Nmax
population.dynamics[which(population.dynamics$Time == 3),"Plants.i"]
head(population.dynamics)
population.dynamics[which(population.dynamics$Time == 3),]
state.list <- list()
for( scenario in c("low","medium","high")){
population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
state <- c(population.dynamics[which(population.dynamics$Time == 3),"Seeds.i"][1],
population.dynamics[which(population.dynamics$Time == 3),"Seeds.j"][1])
state.list[[scenario]] <- state
}
alpha_function2 <- function(Amin, Aslopes,N,N0){
alpha = Amin + Aslopes*(N-N0)
return(alpha)
}
alpha_function3 <- function(Amin, Aslopes,c,N,N0){
alpha = Amin + Aslopes*(1-exp(-c*(N-N0)))
return(alpha)
}
alpha_function4  <- function(Amin, Aslopes,c,N,N0){
e = exp(-Aslopes*(N-N0)) # c is stretching the graph horizontally
a = c*(1-e) #stretching the graph vertically
d = Amin
alpha = (a/(1 + e)) + d
return(alpha)
}
library(deSolve)
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[1] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
ajj <- a_initial[2,2]
aji <- a_initial[1,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],Ni, Nmax[1,2])
ajj <- alpha_function2(a_initial[2,1], a_slope[2,1],Nj, Nmax[2,1])
aji <- alpha_function2(a_initial[2,2], a_slope[2,2],Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],Ni, Nmax[1,1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],Ni, Nmax[1,2])
ajj <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],Nj, Nmax[2,1])
aji <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],Nj, Nmax[2,2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],Ni, Nmax[1,1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],Ni, Nmax[1,2])
ajj <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],Nj, Nmax[2,1])
aji <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],Nj, Nmax[2,2])
}
Fi <-  exp(lambda[1] + aii*g[1]*Ni + aij*g[2]*Nj)
Fj <-  exp(lambda[2] + ajj*g[2]*Nj + aji*g[1]*Ni)
dNidt <- (1-g[1])*s[1] + g[1]* Fi
dNjdt <- (1-g[2])*s[2] + g[2]* Fj
return(list(c(dNidt,dNjdt)))
return(list(c(Fi,Fj)))
}
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[1] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
ajj <- a_initial[2,2]
aji <- a_initial[1,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],Ni, Nmax[1,1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],Ni, Nmax[1,2])
ajj <- alpha_function2(a_initial[2,1], a_slope[2,1],Nj, Nmax[2,1])
aji <- alpha_function2(a_initial[2,2], a_slope[2,2],Nj, Nmax[2,2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],Ni, Nmax[1,1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],Ni, Nmax[1,2])
ajj <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],Nj, Nmax[2,1])
aji <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],Nj, Nmax[2,2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],Ni, Nmax[1,1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],Ni, Nmax[1,2])
ajj <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],Nj, Nmax[2,1])
aji <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],Nj, Nmax[2,2])
}
Fi <-  exp(lambda[1] + aii*g[1]*Ni + aij*g[2]*Nj)
Fj <-  exp(lambda[2] + ajj*g[2]*Nj + aji*g[1]*Ni)
dNidt <- (1-g[1])*s[1] + g[1]* Fi
dNjdt <- (1-g[2])*s[2] + g[2]* Fj
return(list(c(dNidt,dNjdt)))
}
df.pop.proj <- NULL
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
state
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
function.int
scenario
#----extract parameters for each function and each scenario----
params.low <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.9, 0.95) # 1 - mortality rate of seeds
)
params.medium <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.90, 0.85) # mortality rate of seeds
)
params.high <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.90, 0.50) # mortality rate of seeds
)
list.pars <- list()
for( scenario in c("low","medium","high")){
for (function.int in c(1:4)){ # c(1:4)
a_initial <-matrix(nrow=2,ncol=2)
a_slope <-matrix(nrow=2,ncol=2)
c <- matrix(nrow=2,ncol=2)
Nmax <- matrix(nrow=2,ncol=2)
lambda <-c()
for(Code.focal in c("i","j")){ #,"j"
print(paste(scenario, Code.focal,", function",function.int))
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
if(Code.focal =="i"){int.focal <- 1}else{int.focal <- 2}
lambda[int.focal] <- c(summary(FinalFit)$summary["lambdas[1]","mean"])
a_initial[int.focal,] <- c(summary(FinalFit)$summary["alpha_initial[1]","mean"],
summary(FinalFit)$summary["alpha_initial[2]","mean"])
a_slope[int.focal,] <- c(summary(FinalFit)$summary["alpha_slope[1]","mean"],
summary(FinalFit)$summary["alpha_slope[2]","mean"])
c[int.focal,] <- c(summary(FinalFit)$summary["c[1]","mean"],
summary(FinalFit)$summary["c[2]","mean"])
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
SpDataFocal <- simdata[which(simdata$time <= time.exp &
simdata$focal == Code.focal),]
Nmax[int.focal,1] <-   SpDataFocal[which.max(SpDataFocal$fecundity),"plants.i"]
Nmax[int.focal,2] <-   SpDataFocal[which.max(SpDataFocal$fecundity),"plants.j"]
remove(FinalFit, SpDataFocal,  simdata )
}
list.pars[[paste0("pars_",scenario,"_function_",function.int)]] <- append( list(lambda = lambda,
a_slope = a_slope,
a_initial =  a_initial,
c=c,
Nmax = Nmax,
function.int = function.int ),
get(paste0("params.",scenario)))
}
}
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
library(shiny); runApp('shiny/functions.R')
pars
runApp('shiny/functions.R')
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
SpDataFocal <- simdata[which(simdata$time <= time.exp &
simdata$focal == Code.focal),]
SpDataFocal
(1-0.001)*0.9 + 0.001*331
exp(7)
scenario
Nmax
7+0.1*2 - 0.2*6
exp(6)
state
head(population.dynamics)
state.list <- list()
for( scenario in c("low","medium","high")){
population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
state <- c(population.dynamics[which(population.dynamics$Time == 3),"Plants.i"][1],
population.dynamics[which(population.dynamics$Time == 3),"Plants.j"][1])
state.list[[scenario]] <- state
}
state <- state.list[[scenario]]  # initial species densities
state
SpDataFocal[which.max(SpDataFocal$fecundity),"plants.i"]
SpDataFocal[which.max(SpDataFocal$fecundity),]
pars
exp(6.808332)
exp(6.808332)*0.001
(1-0.001)*0.9 + 0.905359
df.NiNj
state
c(population.dynamics[which(population.dynamics$Time == 3),"seeds.i"][1],
population.dynamics[which(population.dynamics$Time == 3),"seeds.j"][1])
population.dynamics[which(population.dynamics$Time == 3),"seeds.i"]
population.dynamics[which(population.dynamics$Time == 3),]
population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"]
view(population.dynamics)
runApp('shiny/functions.R')
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
SpDataFocal <- simdata[which(simdata$time = time.exp-1 &
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
SpDataFocal <- simdata[which(simdata$time == time.exp-1 &
simdata$focal == Code.focal),]
SpDataFocal[which.max(SpDataFocal$fecundity),"plants.i"]
SpDataFocal[which.max(SpDataFocal$fecundity),]
population.dynamics[which(population.dynamics$Time == 2),]
2233 * 0.001
Ricker_function <- function(time,
state,
pars) {
Ni <- state[1] # species i initial densities
Nj <- state[1] # species j initial densities
Nmax <- pars$Nmax # density at which fecundity is max - effect of neighbors is 0
g <- pars$g # germination rate
s <- pars$s #seed survival
lambda <- pars$lambda # intrinsic growth rate
function.int <- pars$function.int # which int.function
a_initial <- pars$a_initial # which int.function
a_slope <- pars$a_slope # which int.function
c <- pars$c # which int.function
if(function.int==1){
aii <- a_initial[1,1]
aij <- a_initial[1,2]
ajj <- a_initial[2,2]
aji <- a_initial[1,2]
}
if(function.int==2){
aii <- alpha_function2(a_initial[1,1], a_slope[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function2(a_initial[1,2], a_slope[1,2],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function2(a_initial[2,1], a_slope[2,1],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function2(a_initial[2,2], a_slope[2,2],g[2]*Nj, g[2]*Nmax[2])
}
if(function.int==3){
aii <- alpha_function3(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function3(a_initial[1,2], a_slope[1,2],c[1,2],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function3(a_initial[2,1], a_slope[2,1],c[2,1],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function3(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj, g[2]*Nmax[2])
}
if(function.int==4){
aii <- alpha_function4(a_initial[1,1], a_slope[1,1],c[1,1],g[1]*Ni, g[1]*Nmax[1])
aij <- alpha_function4(a_initial[1,2], a_slope[1,2],c[1,2],g[1]*Ni, g[1]*Nmax[1])
ajj <- alpha_function4(a_initial[2,1], a_slope[2,1],c[2,1],g[2]*Nj, g[2]*Nmax[2])
aji <- alpha_function4(a_initial[2,2], a_slope[2,2],c[2,2],g[2]*Nj,g[2]*Nmax[2])
}
Fi <-  exp(lambda[1] + aii*g[1]*Ni + aij*g[2]*Nj)
Fj <-  exp(lambda[2] + ajj*g[2]*Nj + aji*g[1]*Ni)
dNidt <- (1-g[1])*s[1] + g[1]* Fi
dNjdt <- (1-g[2])*s[2] + g[2]* Fj
return(list(c(dNidt,dNjdt)))
}
#----extract parameters for each function and each scenario----
params.low <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.9, 0.95) # 1 - mortality rate of seeds
)
params.medium <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.90, 0.85) # mortality rate of seeds
)
params.high <- list(
g = c(0.001, 0.001), # germination rate of seeds
s    = c(0.90, 0.50) # mortality rate of seeds
)
list.pars <- list()
for( scenario in c("low","medium","high")){
for (function.int in c(1:4)){ # c(1:4)
a_initial <-matrix(nrow=2,ncol=2)
a_slope <-matrix(nrow=2,ncol=2)
c <- matrix(nrow=2,ncol=2)
Nmax <- matrix(nrow=2,ncol=2)
lambda <-c()
for(Code.focal in c("i","j")){ #,"j"
print(paste(scenario, Code.focal,", function",function.int))
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
if(Code.focal =="i"){int.focal <- 1}else{int.focal <- 2}
lambda[int.focal] <- c(summary(FinalFit)$summary["lambdas[1]","mean"])
a_initial[int.focal,] <- c(summary(FinalFit)$summary["alpha_initial[1]","mean"],
summary(FinalFit)$summary["alpha_initial[2]","mean"])
a_slope[int.focal,] <- c(summary(FinalFit)$summary["alpha_slope[1]","mean"],
summary(FinalFit)$summary["alpha_slope[2]","mean"])
c[int.focal,] <- c(summary(FinalFit)$summary["c[1]","mean"],
summary(FinalFit)$summary["c[2]","mean"])
remove(FinalFit )
}
population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
Nmax[1] <-   population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
Nmax[2] <-   population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
list.pars[[paste0("pars_",scenario,"_function_",function.int)]] <- append( list(lambda = lambda,
a_slope = a_slope,
a_initial =  a_initial,
c=c,
Nmax = Nmax,
function.int = function.int ),
get(paste0("params.",scenario)))
}
}
state.list <- list()
for( scenario in c("low","medium","high")){
population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
state <- c(population.dynamics[which(population.dynamics$Time == 3),"Seeds.i"][1],
population.dynamics[which(population.dynamics$Time == 3),"Seeds.j"][1])
state.list[[scenario]] <- state
}
#---- for high scenario ----
source("code/PopProjection_toolbox.R")
df.pop.proj <- NULL
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
simdata <- read.csv(paste0("results/Generate.simulated.data.",scenario,".csv"))
simdata <- simdata[which(simdata$time <= time.exp &
simdata$focal == Code.focal),]
simdata <- simdata[which(simdata$time = time.exp &
simdata <- simdata[which(simdata$time == time.exp &
simdata$focal == Code.focal),]
view(simdata)
time = seq(0, 20, by = 0.1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
plot(df.NiNj)
function.int = 1
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 0.1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
plot(df.NiNj)
pars
state
6.480973 +(-0.170121530*0.001*4385.326) +( -0.01119428*0.001*1354.260)
(1-0.001)*0.9 + 0.001 *exp(5.719775)
exp(6.480973 )
(1-0.001)*0.9 + 0.001 *652.6056
(1-0.001)*0.9
exp(0.9)
exp(-4)
0.8991*4385.326
0.8991*3942.847
exp(5.719775)
for( scenario in c("low","medium","high")){
for (function.int in c(1:4)){ # c(1:4)
a_initial <-matrix(nrow=2,ncol=2)
a_slope <-matrix(nrow=2,ncol=2)
c <- matrix(nrow=2,ncol=2)
Nmax <- matrix(nrow=2,ncol=2)
lambda <-c()
for(Code.focal in c("i","j")){ #,"j"
print(paste(scenario, Code.focal,", function",function.int))
load(paste0("results/FinalFit_",scenario,"_",Code.focal,"_function_",function.int,".rds"))
if(Code.focal =="i"){int.focal <- 1}else{int.focal <- 2}
lambda[int.focal] <- c(summary(FinalFit)$summary["lambdas[1]","mean"])
a_initial[int.focal,] <- c(summary(FinalFit)$summary["alpha_initial[1]","mean"],
summary(FinalFit)$summary["alpha_initial[2]","mean"])
a_slope[int.focal,] <- c(summary(FinalFit)$summary["alpha_slope[1]","mean"],
summary(FinalFit)$summary["alpha_slope[2]","mean"])
c[int.focal,] <- c(summary(FinalFit)$summary["c[1]","mean"],
summary(FinalFit)$summary["c[2]","mean"])
remove(FinalFit )
}
population.dynamics <- read.csv(paste0("results/Generate.population.dynamics.",scenario,".csv"))
# initial species densities
Nmax[1] <-   0 #population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
Nmax[2] <-   0 #population.dynamics[which(population.dynamics$Time == 2),"Seeds.i"][1]
list.pars[[paste0("pars_",scenario,"_function_",function.int)]] <- append( list(lambda = lambda,
a_slope = a_slope,
a_initial =  a_initial,
c=c,
Nmax = Nmax,
function.int = function.int ),
get(paste0("params.",scenario)))
}
}
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 0.1)
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
function.int = 2
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
plot(df.NiNj)
scenario = "low"
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
head(df.NiNj)
plot(df.NiNj)
function.int
function.int = 3
pars <- list.pars[[paste0("pars_",scenario,"_function_",function.int)]]
state <- state.list[[scenario]]  # initial species densities
time = seq(0, 20, by = 1)
df.NiNj <- ode(y = state, times = time,
func = Ricker_function, parms = pars)
plot(df.NiNj)
head(df.NiNj)
# initial conditions for viable seeds in seed bank
N0 <- c(5000,5000)
time.exp <- 3 # number of years of data collected
# number of years to simulate
nyears <- 20
params.low <- list(
mu    = c(0.10, 0.05), # mortality rate of seeds
nu    = c(0.10, 0.05), # mortality rate of ind
alpha_ij = 0.5 , #competitive effect of j on i
alpha_ji = 0.1 #competitive effect of i on j
)
params.medium <- list(
mu    = c(0.10, 0.15), # mortality rate of seeds
nu    = c(0.10, 0.15), # mortality rate of ind
alpha_ij = 0.15 , #competitive effect of j on i
alpha_ji = 0.10 #competitive effect of i on j
)
params.high <- list(
mu    = c(0.10, 0.50), # mortality rate of seeds
nu    = c(0.10, 0.50), # mortality rate of ind
alpha_ij = 0.05 , #competitive effect of j on i
alpha_ji = 0.10 #competitive effect of i on j
)
params <- append(get(paste0("params.",scenario)),
list( # constant parameters
T     = 0.50,
gamma = c(0.0001, 0.00001), # germination rate of seeds
r     = c(5.00, 5.00), # intrinsic growth rate
K     = c(100.0, 100.0), # carrying capacity
beta  = c(0.2, 0.2), # biomass of germinant
phi   = c(10,10) # conversion rate from biomass to seed
))
params.plant <- params #for plant growth phase
params.seed <- append(get(paste0("params.",scenario)), # for seed growth phase
list( # constant parameters
T     = 0.50,
gamma = c(0.001, 0.001), # germination rate of seeds
r     = c(0.00, 0.00), # intrinsic growth rate
K     = c(100.0, 100.0), # carrying capacity
beta  = c(0.2, 0.2) # biomass of germinant
))
#for seed germination phase
source("code/GenerateSimData_wrapper.R")
#for seed germination phase
source("code/GenerateSimData_wrapper.R")
random.set <- 1616
set.seed(random.set) #to create reproducible results
source("code/GenerateSimData-Stouffer.R") # Generate Simulated data in "simulated.data" df and
ggplot(simulated.data,
aes(x=fecundity,
group=focal)) +
geom_density(alpha=0.6) +
#scale_color_manual(values=c("blue","red")) +
labs(x=paste0("Viable seed, fecundity per individuals for scenario ",scenario),
title=paste0("Seed distribution (exp), for both individuals for scenario ",scenario)) +
theme_bw()
simulated.data
ggplot(simulated.data,
aes(x=fecundity,
group=focal)) +
geom_density(alpha=0.6) +
#scale_color_manual(values=c("blue","red")) +
labs(x=paste0("Viable seed, fecundity per individuals for scenario ",scenario),
title=paste0("Seed distribution (exp), for both individuals for scenario ",scenario)) +
theme_bw()
ggplot(experimental.outcomes) +
geom_point( aes(x=biomass.i,y=biomass.j),alpha=0.3) +
#geom_smooth( aes(x=biomass.i,y=biomass.j),color="grey",alpha=0.6) +
#xlim(0.875,1)+
#ylim(0,0.6) +
theme_bw()+
labs(title=paste0("Biomass of species j in function of biomass of species i for scenario ",scenario))

}else{
aggresLong <- NA
aggresShort <- NA
synchrony.significance <- NA
}
df.stability.summary.n <- data.frame(sim = as.integer(i),
function.int = as.integer(function.int),
external_factor = add_external_factor,
mean.i=c(mean(df.stability.n$Ni)),
mean.j=c(mean(df.stability.n$Nj)),
median.i=c(median(df.stability.n$Ni)),
median.j=c(median(df.stability.n$Nj)),
ratio.i = c(ratio_i),
ratio.j = c(ratio_j),
oscillation.significance =   oscillation.significance,
stability.significance = stability.significance,
#correlation.estimate=correlation.estimate,
#correlation.pvalue=correlation.pvalue,
#correlation.significance= correlation.significance,
synchrony.significance = synchrony.significance,
synchrony.long = aggresLong,
synchrony.short = aggresShort)
df.stability.summary.n <- bind_cols(df.stability.summary.n,bind_cols(coeff.j,coeff.i))
df.stability.summary.n <- full_join(df.stability.summary.n ,
as.data.frame(df.stability.n[1,]),
by = c("sim", "function.int", "external_factor"))
df.stability.summary <- bind_rows(df.stability.summary,df.stability.summary.n)
}
}
}
#---- global visualisation -----
df.stability.summary.small <- df.stability.summary %>%
mutate(#correlation.significance = case_when(correlation.significance == 1~"corr",
#                                    TRUE ~ "no"),
synchrony.significance = case_when(synchrony.significance == 1~"synchrony",
TRUE ~ "no"))
df.stability.summary.small[df.stability.summary.small =="no"] <- NA
df.stability.summary.small$significance <- apply(df.stability.summary.small[, c("synchrony.significance",
"stability.significance","oscillation.significance")],
1, function(x) toString(na.omit(x)))
df.stability.summary.small <- df.stability.summary.small %>%
mutate(significance = case_when(significance == "synchrony, oscillatory, oscillation" |
significance == "synchrony, oscillatory"|
significance == "synchrony, oscillatory, half_oscillation" ~ "synchronous oscillation",
significance == "synchrony, half-stable, half_oscillation"|
significance == "synchrony, half-stable, oscillation" ~ "half-stable synchronous oscillation",
significance =="stable, half_oscillation"|
significance =="stable, oscillation" ~ "stable oscillation",
significance =="oscillatory"|
significance =="oscillatory, half_oscillation" ~ "oscillation",
significance == "half-stable, half_oscillation"|
significance == "half-stable, oscillation" ~ "half-stable oscillation",
significance == "synchrony, half-stable" ~ "half-stable synchrony",
significance == "synchrony, stable" ~ "stable synchrony",
significance == "synchrony, stable, half_oscillation"|
significance == "synchrony, stable, oscillation"~ "stable synchronous oscillation",
significance == "synchrony, unstable"|significance == "unstable, half_oscillation"|
significance == "synchrony, unstable, oscillation"|significance == "unstable, oscillation"|
significance == "synchrony, unstable, half_oscillation"~ "unstable synchronous oscillation",
TRUE ~ significance
),
significance = factor(significance,
levels=c("stable","stable oscillation","stable synchrony","stable synchronous oscillation",
"half-stable","half-stable oscillation","half-stable synchrony","half-stable synchronous oscillation",
"unstable","unstable synchronous oscillation")))
levels(as.factor(df.stability.summary.small$significance))
levels(as.factor(df.stability.summary.small$external_factor))
df.stability.summary.small[which(is.na(df.stability.summary.small$significance)),]
my_cols <- c("#AA4499", "#DDCC77","#88CCEE", "#44AA99")
cols_interaction <- c("#661100", "#888888", "#6699CC", "#332288") # "#DDCC77","#661100","#117733")
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499",
"#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
safe_colorblind_palette_4 <-c("lightgrey","#CC6677","#117733","#999933",
"lightgrey","#CC6677","#117733","#999933",
"lightgrey","#999933")
df.stability.summary.small <- df.stability.summary.small  %>%
mutate(function.name = case_when(function.int==1 ~"1.Constant",
function.int==2 ~"2.Linear",
function.int==3 ~"3.Exp",
function.int==4 ~"4.Sigmoid"))
summary.stability.plot <-  df.stability.summary.small %>%
filter(comp.com !="no species" & comp.com !="run away population" &
external_factor =="No external factor") %>%
ggplot(aes(x=as.factor(function.name), fill=as.factor(significance),
pattern =as.factor(significance)),
color="black") +
geom_bar_pattern(position="stack",
pattern_spacing = 0.01,
pattern_frequency = 1,
pattern_density = 0.05,
pattern_key_scale_factor = 0.8,
pattern_fill="NA",
color="black") +
scale_pattern_manual("Community dynamics",values=c("none","none","none","none",
'stripe','stripe','stripe','stripe',
"crosshatch","crosshatch")) +
scale_fill_manual("Community dynamics",values=  safe_colorblind_palette_4 ) +
labs(title ="Percentage of community predicted to have at least one species in \nthe community with underlying dynamics",
#subtitle = " initial intraspecific interactions",
y="Number of communities driven by a specific dynamics",
x="interaction function") +
#guides(fill= guide_legend(override.aes = list(pattern = c("none")))) +
#facet_wrap(as.factor(external_factor)~., nrow=3) +
scale_y_continuous( expand= c(0,0))+
theme_minimal() +
theme(panel.background = element_blank(),
legend.key.size = unit(1, 'cm'),
strip.background = element_blank(),
title =element_text(size=16),
panel.grid = element_blank(),
panel.border =  element_blank(),
axis.text.x= element_text(size=16),
axis.text.y= element_text(size=16),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
strip.text = element_text(size=16))
summary.stability.plot
##########################################################################################################
# 1. minimum  abundance
##########################################################################################################
df.sim <- as.data.frame(df.sim)
df.min.abundance <- NULL
nsims <- 750
for(i in 1:nsims){
for( function.int in 1:4){
for(add_external_factor in c("No external factor")){
print(paste0("int ", i,"for funct ",function.int, add_external_factor))
df.min.abundance.n <- df.sim[which(df.sim$sim.i == i &
df.sim$function.int == function.int &
df.sim$external_factor == add_external_factor &
df.sim$time > 99),]
vec.abundance.Ni <- df.min.abundance.n$Ni
vec.abundance.Nj <- df.min.abundance.n$Nj
vec.GR.Ni <- df.min.abundance.n$dNi
vec.GR.Nj <- df.min.abundance.n$dNj
df.min.abun.n <- data.frame(sim = i,
a_initial.inter = c(df.min.abundance.n$a_initial.i.j[1],df.min.abundance.n$a_initial.j.i[1]),
function.int= function.int,
external_factor = add_external_factor,
focal = c("Ni","Nj"),
mean.abundance = c(mean(vec.abundance.Ni, na.rm=T),mean(vec.abundance.Nj, na.rm=T)),
median.abundance = c(median(vec.abundance.Ni, na.rm=T),median(vec.abundance.Nj, na.rm=T)),
min.abundance = c(min(vec.abundance.Ni, na.rm=T),min(vec.abundance.Nj, na.rm=T)),
min.GR = c(vec.GR.Ni[which(vec.abundance.Ni ==min(vec.abundance.Ni, na.rm=T))[1]],
vec.GR.Nj[which(vec.abundance.Nj ==min(vec.abundance.Nj, na.rm=T))[1]]),
max.abundance = c(max(vec.abundance.Ni, na.rm=T),max(vec.abundance.Nj, na.rm=T)),
max.GR = c(max(vec.GR.Ni, na.rm=T),max(vec.GR.Nj, na.rm=T)))
df.min.abundance <- bind_rows(df.min.abundance,df.min.abun.n)
}
}
}
##########################################################################################################
# 1. minimum  abundance
##########################################################################################################
df.sim <- as.data.frame(df.sim)
df.min.abundance <- NULL
nsims <- 750
for(i in 1:nsims){
for( function.int in 1:4){
for(add_external_factor in c("No external factor")){
print(paste0("int ", i,"for funct ",function.int, add_external_factor))
df.min.abundance.n <- df.sim[which(df.sim$sim.i == i &
df.sim$function.int == function.int &
df.sim$external_factor == add_external_factor &
df.sim$time > 99),]
vec.abundance.Ni <- df.min.abundance.n$Ni
vec.abundance.Nj <- df.min.abundance.n$Nj
vec.GR.Ni <- df.min.abundance.n$dNi
vec.GR.Nj <- df.min.abundance.n$dNj
df.runaway.n <- df.sim[which(df.sim$sim.i == i &
df.sim$function.int == function.int &
df.sim$external_factor == add_external_factor),]
df.min.abun.n <- data.frame(sim = i,
a_initial.inter = c(df.min.abundance.n$a_initial.i.j[1],df.min.abundance.n$a_initial.j.i[1]),
function.int= function.int,
external_factor = add_external_factor,
focal = c("Ni","Nj"),
mean.abundance = c(mean(vec.abundance.Ni, na.rm=T),mean(vec.abundance.Nj, na.rm=T)),
median.abundance = c(median(vec.abundance.Ni, na.rm=T),median(vec.abundance.Nj, na.rm=T)),
min.abundance = c(min(vec.abundance.Ni, na.rm=T),min(vec.abundance.Nj, na.rm=T)),
min.GR = c(vec.GR.Ni[which(vec.abundance.Ni ==min(vec.abundance.Ni, na.rm=T))[1]],
vec.GR.Nj[which(vec.abundance.Nj ==min(vec.abundance.Nj, na.rm=T))[1]]),
max.abundance = c(max(vec.abundance.Ni, na.rm=T),max(vec.abundance.Nj, na.rm=T)),
max.GR = c(max(vec.GR.Ni, na.rm=T),max(vec.GR.Nj, na.rm=T)),
max.abundance.all = c(max(df.runaway.n$Ni, na.rm=T),max(df.runaway.n$Nj, na.rm=T)))
df.min.abundance <- bind_rows(df.min.abundance,df.min.abun.n)
}
}
}
df.min.abundance  <- df.min.abundance  %>%
mutate(function.name = case_when(function.int==1 ~"1.Constant",
function.int==2 ~"2.Linear",
function.int==3 ~"3.Exp",
function.int==4 ~"4.Sigmoid")) %>%
mutate(Mean.class = case_when(mean.abundance <=0 ~"Null",
mean.abundance > 500 ~"Runaway",
T ~"Okay"),
Median.class = case_when(median.abundance <=0 ~"Null",
median.abundance > 1000 ~"Runaway",
T ~"Okay"),
GR.class = case_when(min.GR >= 1  & max.GR < 500 ~"Positive",
max.GR > 500 ~"unbound" ,
min.GR==0 & max.GR < 500 ~"Null constant",
T ~"Negative or NA"),
Abundance.class = case_when( min.abundance > 0 & max.abundance < 1000 ~ "Persisting",
max.abundance.all  > 1000 ~"unbound",
T ~"Extinct or NA"))
# make it horyzontal
df.min.abun.horyzontal <- full_join(df.min.abundance[which(df.min.abundance$focal =="Ni"),],
df.min.abundance[which(df.min.abundance$focal =="Nj"),], suffix = c(".Ni",".Nj"),
by=c("function.int","sim","external_factor","function.name")) %>%
mutate(comp.com = case_when((Median.class.Ni =="Null" & Median.class.Nj =="Null" )|
(GR.class.Ni=="Negative or NA" & GR.class.Nj=="Negative or NA") ~"no species",
GR.class.Ni=="Positive" & GR.class.Nj=="Positive" &
Median.class.Ni =="Okay" & Median.class.Nj =="Okay" ~"two-species community",
(GR.class.Ni=="unbound" | GR.class.Nj=="unbound"|
Median.class.Ni =="Runaway"|Median.class.Nj =="Runaway"|
Abundance.class.Ni =="unbound"|Abundance.class.Nj =="unbound") ~ "run away population",
T ~"one-species community")) %>%
mutate(Interspecific.interaction = case_when(a_initial.inter.Ni > 0 &
a_initial.inter.Nj  > 0 ~ "facilitation",
a_initial.inter.Ni < 0 &
a_initial.inter.Nj  < 0 ~ "competition",
T~"both")) %>%
mutate(comp.com = factor(comp.com, levels=c("run away population","no species","one-species community","two-species community")),
Interspecific.interaction = factor(Interspecific.interaction,
levels=c("competition","both","facilitation")))
# visualisation
#my_cols <- c("#AA4499", "#DDCC77","#88CCEE", "#44AA99")
cols_interaction <- c("#661100", "#888888", "#6699CC", "#332288") # "#DDCC77","#661100","#117733")
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499",
"#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x=expression(paste("Initial interaction value", alpha['0,i,j'])))+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "right",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=20),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=16, angle=66, hjust=1),
axis.text.y= element_text(size=20),
title=element_text(size=16))
com.comp.plot
##########################################################################################################
# 1. minimum  abundance
##########################################################################################################
df.sim <- as.data.frame(df.sim)
df.min.abundance <- NULL
nsims <- 750
for(i in 1:nsims){
for( function.int in 1:4){
for(add_external_factor in c("No external factor")){
print(paste0("int ", i,"for funct ",function.int, add_external_factor))
df.min.abundance.n <- df.sim[which(df.sim$sim.i == i &
df.sim$function.int == function.int &
df.sim$external_factor == add_external_factor &
df.sim$time > 99),]
vec.abundance.Ni <- df.min.abundance.n$Ni
vec.abundance.Nj <- df.min.abundance.n$Nj
vec.GR.Ni <- df.min.abundance.n$dNi
vec.GR.Nj <- df.min.abundance.n$dNj
df.runaway.n <- df.sim[which(df.sim$sim.i == i &
df.sim$function.int == function.int &
df.sim$external_factor == add_external_factor),]
df.min.abun.n <- data.frame(sim = i,
a_initial.inter = c(df.min.abundance.n$a_initial.i.j[1],df.min.abundance.n$a_initial.j.i[1]),
function.int= function.int,
external_factor = add_external_factor,
focal = c("Ni","Nj"),
mean.abundance = c(mean(vec.abundance.Ni, na.rm=T),mean(vec.abundance.Nj, na.rm=T)),
median.abundance = c(median(vec.abundance.Ni, na.rm=T),median(vec.abundance.Nj, na.rm=T)),
min.abundance = c(min(vec.abundance.Ni, na.rm=T),min(vec.abundance.Nj, na.rm=T)),
min.GR = c(vec.GR.Ni[which(vec.abundance.Ni ==min(vec.abundance.Ni, na.rm=T))[1]],
vec.GR.Nj[which(vec.abundance.Nj ==min(vec.abundance.Nj, na.rm=T))[1]]),
max.abundance = c(max(vec.abundance.Ni, na.rm=T),max(vec.abundance.Nj, na.rm=T)),
max.GR = c(max(vec.GR.Ni, na.rm=T),max(vec.GR.Nj, na.rm=T)),
max.abundance.all = c(max(df.runaway.n$Ni, na.rm=T),max(df.runaway.n$Nj, na.rm=T)),
max.GR.all = c(max(df.runaway.n$dNi, na.rm=T),max(df.runaway.n$dNj, na.rm=T)),
median.abundance.all = c(median(df.runaway.n$Ni, na.rm=T),median(df.runaway.n$Nj, na.rm=T)))
df.min.abundance <- bind_rows(df.min.abundance,df.min.abun.n)
}
}
}
df.min.abundance  <- df.min.abundance  %>%
mutate(function.name = case_when(function.int==1 ~"1.Constant",
function.int==2 ~"2.Linear",
function.int==3 ~"3.Exp",
function.int==4 ~"4.Sigmoid")) %>%
mutate(Mean.class = case_when(mean.abundance <=0 ~"Null",
mean.abundance > 500 ~"Runaway",
T ~"Okay"),
Median.class = case_when(median.abundance <=0 ~"Null",
median.abundance.all > 1000 ~"Runaway",
T ~"Okay"),
GR.class = case_when(min.GR >= 1  & max.GR < 500 ~"Positive",
max.GR.all > 500 ~"unbound" ,
min.GR==0 & max.GR < 500 ~"Null constant",
T ~"Negative or NA"),
Abundance.class = case_when( min.abundance > 0 & max.abundance < 1000 ~ "Persisting",
max.abundance.all  > 1000 ~"unbound",
T ~"Extinct or NA"))
# make it horyzontal
df.min.abun.horyzontal <- full_join(df.min.abundance[which(df.min.abundance$focal =="Ni"),],
df.min.abundance[which(df.min.abundance$focal =="Nj"),], suffix = c(".Ni",".Nj"),
by=c("function.int","sim","external_factor","function.name")) %>%
mutate(comp.com = case_when((Median.class.Ni =="Null" & Median.class.Nj =="Null" )|
(GR.class.Ni=="Negative or NA" & GR.class.Nj=="Negative or NA") ~"no species",
GR.class.Ni=="Positive" & GR.class.Nj=="Positive" &
Median.class.Ni =="Okay" & Median.class.Nj =="Okay" ~"two-species community",
(GR.class.Ni=="unbound" | GR.class.Nj=="unbound"|
Median.class.Ni =="Runaway"|Median.class.Nj =="Runaway"|
Abundance.class.Ni =="unbound"|Abundance.class.Nj =="unbound") ~ "run away population",
T ~"one-species community")) %>%
mutate(Interspecific.interaction = case_when(a_initial.inter.Ni > 0 &
a_initial.inter.Nj  > 0 ~ "facilitation",
a_initial.inter.Ni < 0 &
a_initial.inter.Nj  < 0 ~ "competition",
T~"both")) %>%
mutate(comp.com = factor(comp.com, levels=c("run away population","no species","one-species community","two-species community")),
Interspecific.interaction = factor(Interspecific.interaction,
levels=c("competition","both","facilitation")))
# visualisation
#my_cols <- c("#AA4499", "#DDCC77","#88CCEE", "#44AA99")
cols_interaction <- c("#661100", "#888888", "#6699CC", "#332288") # "#DDCC77","#661100","#117733")
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499",
"#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x=expression(paste("Initial interaction value", alpha['0,i,j'])))+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "right",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=20),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=16, angle=66, hjust=1),
axis.text.y= element_text(size=20),
title=element_text(size=16))
com.comp.plot
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x="Governing interaction")+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "right",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=20),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=20, angle=66, hjust=1),
axis.text.y= element_text(size=20),
title=element_text(size=16))
com.comp.plot
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x="Governing interaction")+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "right",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=20),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=20, angle=66, hjust=1),
axis.text.y= element_text(size=20),
axis.title.x= element_text(size=20),
axis.title.y= element_text(size=20),
title=element_text(size=16))
com.comp.plot
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x="Governing interaction")+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "bottom",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=20),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=20, angle=66, hjust=1),
axis.text.y= element_text(size=20),
axis.title.x= element_text(size=24),
axis.title.y= element_text(size=24),
title=element_text(size=16))
com.comp.plot
ggsave(com.comp.plot,
file = "figures/com.comp.plot.pdf")
ggsave(com.comp.plot,
file = "figures/com.comp.plot.pdf")
com.comp.plot <- ggplot(df.min.abun.horyzontal[df.min.abun.horyzontal$external_factor =="No external factor",],
aes( fill=as.factor(comp.com),
x=as.factor(Interspecific.interaction) )) +
geom_bar()+
#labels=c("run away population","no species","1-species","2-species")) +
scale_color_manual(values = darken(cols_interaction, amount = .1)) +
#scale_pattern_fill_manual(values = my_cols) +
scale_fill_manual(
values = cols_interaction) +
facet_wrap(.~function.name,nrow=1) +
scale_y_continuous(limits=c(0,250), expand = c(0, 0)) +
# scale_x_discrete(labels = c("run away","no species","one-species","two-species")) +
theme_minimal() +
labs(y="Number of simulated communities", fill="Community trajectory",
x="Governing interaction")+
#title="Number of communities with one or two species \nhaving a positive or null growth rate \nwhen low AND a positive abundance")+
guides(color="none") +
theme( legend.key.size = unit(1, 'cm'),
legend.position = "bottom",
strip.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text = element_text(size=28),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
#axis.ticks.x=element_blank(),
axis.text.x= element_text(size=20, angle=66, hjust=1),
axis.text.y= element_text(size=20),
axis.title.x= element_text(size=24),
axis.title.y= element_text(size=24),
title=element_text(size=16))
com.comp.plot
ggsave(com.comp.plot,
file = "figures/com.comp.plot.pdf")
ggsave(com.comp.plot,
file = "figures/com.comp.plot.pdf")
competition <- read.csv("/Users/lisabuche/Documents/Projects/Perenjori/data/Perenjori_competition_2022.csv",
header = T,stringsAsFactors = F, sep=",",
na.strings=c("","NA"))
